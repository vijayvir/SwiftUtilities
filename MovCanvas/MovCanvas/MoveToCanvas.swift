//
//  MoveToCanvas.swift
//  ProjectName
//
//  Created by AuthorName on 09/09/23.
//  Copyright Â© 2023 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

enum VijayPoint {
    case move(CGPoint)
    case addLine(CGPoint)
    case addCurver(CGPoint,CGPoint,CGPoint)
}
class MyBezierPath: UIBezierPath {
    var startPoint :CGPoint?
    var pointMe : [VijayPoint] = []

    override func move(to point: CGPoint) {
        super.move(to: point)
        startPoint=point;
        pointMe.append(VijayPoint.move(point))
    }
    override func addLine(to point: CGPoint) {
        super.addLine(to: point)
        startPoint=point;
        pointMe.append(VijayPoint.addLine(point))
    }
    override func addCurve(to endPoint: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint) {
        super.addCurve(to: endPoint, controlPoint1: controlPoint1, controlPoint2: controlPoint2)
        pointMe.append(VijayPoint.addCurver(endPoint, controlPoint1, controlPoint2))
        
    }
    func firstMe(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 240), resizing: ResizingBehavior = .aspectFit)-> CGPoint{
        
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 240), target: targetFrame)
        
        switch pointMe[0]{
            
        case .move(let value):
            return CGPoint(x: value.x * resizedFrame.width / 240,  y:  value.y * resizedFrame.height / 240 )
        case .addLine(_):
            return CGPoint()
        case .addCurver(_, _, _):
            return CGPoint()
        }
       
      
      
    }
    
    
    func NextMe(index : Int , frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 240), resizing: ResizingBehavior = .aspectFit)-> (VijayPoint , CGRect ){
        
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 240), target: targetFrame)
      
//        CGPoint(x: pointMe[index].x * resizedFrame.width / 240,  y:  pointMe[index].y * resizedFrame.height / 240 )
//
        return (pointMe[index] ,resizedFrame )
    }
    @objc(MoveToCanvasResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill tðŸ§¶he target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



extension MoveToCanvas {
    class func pathme() -> MyBezierPath{
        let bezier3Path = MyBezierPath()
    
        
        bezier3Path.move(to: CGPoint(x: 16.5, y: 187.5))
        bezier3Path.addLine(to: CGPoint(x: 105.5, y: 44.5))
        bezier3Path.addLine(to: CGPoint(x: 206.5, y: 187.5))
        bezier3Path.move(to: CGPoint(x: 60.5, y: 115.5))
        bezier3Path.addLine(to: CGPoint(x: 155.5, y: 115.5))
        bezier3Path.close()
        
        

        return bezier3Path
    }
}
public class MoveToCanvas : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 240), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 240), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 240)


        //// Bezier Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 16.5, y: 187.5))
        bezier2Path.addLine(to: CGPoint(x: 105.5, y: 44.5))
        bezier2Path.addLine(to: CGPoint(x: 206.5, y: 187.5))
        bezier2Path.move(to: CGPoint(x: 60.5, y: 115.5))
        bezier2Path.addLine(to: CGPoint(x: 155.5, y: 115.5))
        bezier2Path.close()
        UIColor.clear.setFill()
        bezier2Path.fill()
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()
        
        context.restoreGState()

    }




    @objc(MoveToCanvasResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
