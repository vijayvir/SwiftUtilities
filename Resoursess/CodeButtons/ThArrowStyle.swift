//
//  ThArrowStyle.swift
//  ProjectName
//
//  Created by AuthorName on 14/03/19.
//  Copyright Â© 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ThArrowStyle : NSObject {

    //// Cache

    private struct Cache {
        static let thNextColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static var imageOfThArrowBack: UIImage?
        static var thArrowBackTargets: [AnyObject]?
        static var imageOfThArrowFront: UIImage?
        static var thArrowFrontTargets: [AnyObject]?
        static var imageOfTHPhone: UIImage?
        static var tHPhoneTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var thNextColor: UIColor { return Cache.thNextColor }

    //// Drawing Methods

    @objc dynamic public class func drawThArrowBack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 225, height: 225), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 225, height: 225), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 225, y: resizedFrame.height / 225)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 155.5, y: 222.5))
        bezierPath.addLine(to: CGPoint(x: 181.5, y: 196.5))
        bezierPath.addLine(to: CGPoint(x: 95.5, y: 110.5))
        bezierPath.addLine(to: CGPoint(x: 181.5, y: 24.5))
        bezierPath.addLine(to: CGPoint(x: 155.5, y: -1.5))
        bezierPath.addLine(to: CGPoint(x: 43.5, y: 110.5))
        bezierPath.addLine(to: CGPoint(x: 155.5, y: 222.5))
        bezierPath.close()
        ThArrowStyle.thNextColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawThArrowFront(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 225, height: 225), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 225, height: 225), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 225, y: resizedFrame.height / 225)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 69.5, y: 222.5))
        bezierPath.addLine(to: CGPoint(x: 43.5, y: 196.5))
        bezierPath.addLine(to: CGPoint(x: 129.5, y: 110.5))
        bezierPath.addLine(to: CGPoint(x: 43.5, y: 24.5))
        bezierPath.addLine(to: CGPoint(x: 69.5, y: -1.5))
        bezierPath.addLine(to: CGPoint(x: 181.5, y: 110.5))
        bezierPath.addLine(to: CGPoint(x: 69.5, y: 222.5))
        bezierPath.close()
        ThArrowStyle.thNextColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTHPhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 226, height: 226), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 226, height: 226), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 226, y: resizedFrame.height / 226)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 113, y: 113)
        context.scaleBy(x: 0.9, y: 0.9)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -67.8, y: -15.07))
        bezierPath.addCurve(to: CGPoint(x: 15.07, y: 67.8), controlPoint1: CGPoint(x: -50.22, y: 20.09), controlPoint2: CGPoint(x: -20.09, y: 48.97))
        bezierPath.addLine(to: CGPoint(x: 42.69, y: 40.18))
        bezierPath.addCurve(to: CGPoint(x: 55.24, y: 37.67), controlPoint1: CGPoint(x: 46.46, y: 36.41), controlPoint2: CGPoint(x: 51.48, y: 35.16))
        bezierPath.addCurve(to: CGPoint(x: 100.44, y: 45.2), controlPoint1: CGPoint(x: 69.06, y: 42.69), controlPoint2: CGPoint(x: 84.12, y: 45.2))
        bezierPath.addCurve(to: CGPoint(x: 113, y: 57.76), controlPoint1: CGPoint(x: 107.98, y: 45.2), controlPoint2: CGPoint(x: 113, y: 50.22))
        bezierPath.addLine(to: CGPoint(x: 113, y: 100.44))
        bezierPath.addCurve(to: CGPoint(x: 100.44, y: 113), controlPoint1: CGPoint(x: 113, y: 107.98), controlPoint2: CGPoint(x: 107.98, y: 113))
        bezierPath.addCurve(to: CGPoint(x: -113, y: -100.44), controlPoint1: CGPoint(x: -17.58, y: 113), controlPoint2: CGPoint(x: -113, y: 17.58))
        bezierPath.addCurve(to: CGPoint(x: -100.44, y: -113), controlPoint1: CGPoint(x: -113, y: -107.98), controlPoint2: CGPoint(x: -107.98, y: -113))
        bezierPath.addLine(to: CGPoint(x: -56.5, y: -113))
        bezierPath.addCurve(to: CGPoint(x: -43.94, y: -100.44), controlPoint1: CGPoint(x: -48.97, y: -113), controlPoint2: CGPoint(x: -43.94, y: -107.98))
        bezierPath.addCurve(to: CGPoint(x: -36.41, y: -55.24), controlPoint1: CGPoint(x: -43.94, y: -85.38), controlPoint2: CGPoint(x: -41.43, y: -70.31))
        bezierPath.addCurve(to: CGPoint(x: -38.92, y: -42.69), controlPoint1: CGPoint(x: -35.16, y: -51.48), controlPoint2: CGPoint(x: -36.41, y: -46.46))
        bezierPath.addLine(to: CGPoint(x: -67.8, y: -15.07))
        bezierPath.addLine(to: CGPoint(x: -67.8, y: -15.07))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        ThArrowStyle.thNextColor.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfThArrowBack: UIImage {
        if Cache.imageOfThArrowBack != nil {
            return Cache.imageOfThArrowBack!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 225, height: 225), false, 0)
        let context = UIGraphicsGetCurrentContext()!
        context.translateBy(x: 0, y: 2)
            ThArrowStyle.drawThArrowBack()

        Cache.imageOfThArrowBack = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfThArrowBack!
    }

    @objc dynamic public class var imageOfThArrowFront: UIImage {
        if Cache.imageOfThArrowFront != nil {
            return Cache.imageOfThArrowFront!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 225, height: 225), false, 0)
        let context = UIGraphicsGetCurrentContext()!
        context.translateBy(x: 0, y: 2)
            ThArrowStyle.drawThArrowFront()

        Cache.imageOfThArrowFront = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfThArrowFront!
    }

    @objc dynamic public class var imageOfTHPhone: UIImage {
        if Cache.imageOfTHPhone != nil {
            return Cache.imageOfTHPhone!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 226, height: 226), false, 0)
            ThArrowStyle.drawTHPhone()

        Cache.imageOfTHPhone = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTHPhone!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var thArrowBackTargets: [AnyObject]! {
        get { return Cache.thArrowBackTargets }
        set {
            Cache.thArrowBackTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ThArrowStyle.imageOfThArrowBack)
            }
        }
    }

    @objc @IBOutlet dynamic var thArrowFrontTargets: [AnyObject]! {
        get { return Cache.thArrowFrontTargets }
        set {
            Cache.thArrowFrontTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ThArrowStyle.imageOfThArrowFront)
            }
        }
    }

    @objc @IBOutlet dynamic var tHPhoneTargets: [AnyObject]! {
        get { return Cache.tHPhoneTargets }
        set {
            Cache.tHPhoneTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ThArrowStyle.imageOfTHPhone)
            }
        }
    }




    @objc(ThArrowStyleResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
