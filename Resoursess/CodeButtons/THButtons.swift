//
//  THButtons.swift
//  ProjectName
//
//  Created by AuthorName on 09/04/19.
//  Copyright Â© 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class THButtons : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawBacK(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 225, height: 225), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 225, height: 225), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 225, y: resizedFrame.height / 225)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 112.5, y: 110.5)
        context.scaleBy(x: 0.8, y: 0.8)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 43, y: 112))
        bezierPath.addLine(to: CGPoint(x: 69, y: 86))
        bezierPath.addLine(to: CGPoint(x: -17, y: 0))
        bezierPath.addLine(to: CGPoint(x: 69, y: -86))
        bezierPath.addLine(to: CGPoint(x: 43, y: -112))
        bezierPath.addLine(to: CGPoint(x: -69, y: 0))
        bezierPath.addLine(to: CGPoint(x: 43, y: 112))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFront(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 225, height: 225), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 225, height: 225), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 225, y: resizedFrame.height / 225)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 112.5, y: 110.5)
        context.scaleBy(x: 0.8, y: 0.8)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -43, y: 112))
        bezierPath.addLine(to: CGPoint(x: -69, y: 86))
        bezierPath.addLine(to: CGPoint(x: 17, y: 0))
        bezierPath.addLine(to: CGPoint(x: -69, y: -86))
        bezierPath.addLine(to: CGPoint(x: -43, y: -112))
        bezierPath.addLine(to: CGPoint(x: 69, y: 0))
        bezierPath.addLine(to: CGPoint(x: -43, y: 112))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 226, height: 226), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 226, height: 226), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 226, y: resizedFrame.height / 226)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 113, y: 113)
        context.scaleBy(x: 0.8, y: 0.8)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -67.8, y: -15.07))
        bezierPath.addCurve(to: CGPoint(x: 15.07, y: 67.8), controlPoint1: CGPoint(x: -50.22, y: 20.09), controlPoint2: CGPoint(x: -20.09, y: 48.97))
        bezierPath.addLine(to: CGPoint(x: 42.69, y: 40.18))
        bezierPath.addCurve(to: CGPoint(x: 55.24, y: 37.67), controlPoint1: CGPoint(x: 46.46, y: 36.41), controlPoint2: CGPoint(x: 51.48, y: 35.16))
        bezierPath.addCurve(to: CGPoint(x: 100.44, y: 45.2), controlPoint1: CGPoint(x: 69.06, y: 42.69), controlPoint2: CGPoint(x: 84.12, y: 45.2))
        bezierPath.addCurve(to: CGPoint(x: 113, y: 57.76), controlPoint1: CGPoint(x: 107.98, y: 45.2), controlPoint2: CGPoint(x: 113, y: 50.22))
        bezierPath.addLine(to: CGPoint(x: 113, y: 100.44))
        bezierPath.addCurve(to: CGPoint(x: 100.44, y: 113), controlPoint1: CGPoint(x: 113, y: 107.98), controlPoint2: CGPoint(x: 107.98, y: 113))
        bezierPath.addCurve(to: CGPoint(x: -113, y: -100.44), controlPoint1: CGPoint(x: -17.58, y: 113), controlPoint2: CGPoint(x: -113, y: 17.58))
        bezierPath.addCurve(to: CGPoint(x: -100.44, y: -113), controlPoint1: CGPoint(x: -113, y: -107.98), controlPoint2: CGPoint(x: -107.98, y: -113))
        bezierPath.addLine(to: CGPoint(x: -56.5, y: -113))
        bezierPath.addCurve(to: CGPoint(x: -43.94, y: -100.44), controlPoint1: CGPoint(x: -48.97, y: -113), controlPoint2: CGPoint(x: -43.94, y: -107.98))
        bezierPath.addCurve(to: CGPoint(x: -36.41, y: -55.24), controlPoint1: CGPoint(x: -43.94, y: -85.38), controlPoint2: CGPoint(x: -41.43, y: -70.31))
        bezierPath.addCurve(to: CGPoint(x: -38.92, y: -42.69), controlPoint1: CGPoint(x: -35.16, y: -51.48), controlPoint2: CGPoint(x: -36.41, y: -46.46))
        bezierPath.addLine(to: CGPoint(x: -67.8, y: -15.07))
        bezierPath.addLine(to: CGPoint(x: -67.8, y: -15.07))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        theme.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPencileditbuttonCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 529, height: 529), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 529, height: 529), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 529, y: resizedFrame.height / 529)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 264, y: 264)
        context.scaleBy(x: 0.8, y: 0.8)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 64.88, y: -174.87))
        bezierPath.addLine(to: CGPoint(x: 172.47, y: -67.29))
        bezierPath.addLine(to: CGPoint(x: -99.87, y: 205.05))
        bezierPath.addLine(to: CGPoint(x: -207.4, y: 97.47))
        bezierPath.addLine(to: CGPoint(x: 64.88, y: -174.87))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 254.11, y: -200.82))
        bezierPath.addLine(to: CGPoint(x: 206.13, y: -248.8))
        bezierPath.addCurve(to: CGPoint(x: 138.87, y: -248.8), controlPoint1: CGPoint(x: 187.59, y: -267.35), controlPoint2: CGPoint(x: 157.48, y: -267.35))
        bezierPath.addLine(to: CGPoint(x: 92.91, y: -202.84))
        bezierPath.addLine(to: CGPoint(x: 200.5, y: -95.25))
        bezierPath.addLine(to: CGPoint(x: 254.11, y: -148.86))
        bezierPath.addCurve(to: CGPoint(x: 254.11, y: -200.82), controlPoint1: CGPoint(x: 268.5, y: -163.25), controlPoint2: CGPoint(x: 268.5, y: -186.44))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: -263.7, y: 248.69))
        bezierPath.addCurve(to: CGPoint(x: -248.89, y: 263.26), controlPoint1: CGPoint(x: -265.66, y: 257.5), controlPoint2: CGPoint(x: -257.7, y: 265.4))
        bezierPath.addLine(to: CGPoint(x: -129, y: 234.19))
        bezierPath.addLine(to: CGPoint(x: -236.53, y: 126.6))
        bezierPath.addLine(to: CGPoint(x: -263.7, y: 248.69))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSettingsCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 479, height: 479), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 479, height: 479), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 479, y: resizedFrame.height / 479)


        //// Group
        context.saveGState()
        context.translateBy(x: 240, y: 239)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 214.2, y: -49.9))
        bezierPath.addLine(to: CGPoint(x: 180.6, y: -55.6))
        bezierPath.addCurve(to: CGPoint(x: 167.1, y: -88.2), controlPoint1: CGPoint(x: 177.1, y: -66.9), controlPoint2: CGPoint(x: 172.6, y: -77.8))
        bezierPath.addLine(to: CGPoint(x: 186.9, y: -115.9))
        bezierPath.addCurve(to: CGPoint(x: 183.7, y: -154), controlPoint1: CGPoint(x: 195.3, y: -127.7), controlPoint2: CGPoint(x: 194, y: -143.8))
        bezierPath.addLine(to: CGPoint(x: 153.9, y: -183.8))
        bezierPath.addCurve(to: CGPoint(x: 133, y: -192.5), controlPoint1: CGPoint(x: 148.3, y: -189.4), controlPoint2: CGPoint(x: 140.9, y: -192.5))
        bezierPath.addCurve(to: CGPoint(x: 115.9, y: -187), controlPoint1: CGPoint(x: 126.8, y: -192.5), controlPoint2: CGPoint(x: 120.9, y: -190.6))
        bezierPath.addLine(to: CGPoint(x: 88.1, y: -167.2))
        bezierPath.addCurve(to: CGPoint(x: 54.3, y: -181.1), controlPoint1: CGPoint(x: 77.3, y: -172.9), controlPoint2: CGPoint(x: 66, y: -177.6))
        bezierPath.addLine(to: CGPoint(x: 48.7, y: -214.3))
        bezierPath.addCurve(to: CGPoint(x: 19.5, y: -239), controlPoint1: CGPoint(x: 46.3, y: -228.6), controlPoint2: CGPoint(x: 34, y: -239))
        bezierPath.addLine(to: CGPoint(x: -22.6, y: -239))
        bezierPath.addCurve(to: CGPoint(x: -51.8, y: -214.3), controlPoint1: CGPoint(x: -37.1, y: -239), controlPoint2: CGPoint(x: -49.4, y: -228.6))
        bezierPath.addLine(to: CGPoint(x: -57.6, y: -180.3))
        bezierPath.addCurve(to: CGPoint(x: -90.1, y: -166.6), controlPoint1: CGPoint(x: -68.8, y: -176.8), controlPoint2: CGPoint(x: -79.7, y: -172.2))
        bezierPath.addLine(to: CGPoint(x: -117.6, y: -186.4))
        bezierPath.addCurve(to: CGPoint(x: -134.8, y: -191.9), controlPoint1: CGPoint(x: -122.6, y: -190), controlPoint2: CGPoint(x: -128.6, y: -191.9))
        bezierPath.addCurve(to: CGPoint(x: -155.7, y: -183.2), controlPoint1: CGPoint(x: -142.7, y: -191.9), controlPoint2: CGPoint(x: -150.2, y: -188.8))
        bezierPath.addLine(to: CGPoint(x: -185.6, y: -153.4))
        bezierPath.addCurve(to: CGPoint(x: -188.8, y: -115.3), controlPoint1: CGPoint(x: -195.8, y: -143.2), controlPoint2: CGPoint(x: -197.2, y: -127.1))
        bezierPath.addLine(to: CGPoint(x: -168.8, y: -87.2))
        bezierPath.addCurve(to: CGPoint(x: -182.1, y: -54.5), controlPoint1: CGPoint(x: -174.3, y: -76.7), controlPoint2: CGPoint(x: -178.7, y: -65.8))
        bezierPath.addLine(to: CGPoint(x: -215.3, y: -48.9))
        bezierPath.addCurve(to: CGPoint(x: -240, y: -19.7), controlPoint1: CGPoint(x: -229.6, y: -46.5), controlPoint2: CGPoint(x: -240, y: -34.2))
        bezierPath.addLine(to: CGPoint(x: -240, y: 22.4))
        bezierPath.addCurve(to: CGPoint(x: -215.3, y: 51.6), controlPoint1: CGPoint(x: -240, y: 36.9), controlPoint2: CGPoint(x: -229.6, y: 49.2))
        bezierPath.addLine(to: CGPoint(x: -181.3, y: 57.4))
        bezierPath.addCurve(to: CGPoint(x: -167.6, y: 89.9), controlPoint1: CGPoint(x: -177.8, y: 68.6), controlPoint2: CGPoint(x: -173.2, y: 79.5))
        bezierPath.addLine(to: CGPoint(x: -187.3, y: 117.3))
        bezierPath.addCurve(to: CGPoint(x: -184.1, y: 155.4), controlPoint1: CGPoint(x: -195.7, y: 129.1), controlPoint2: CGPoint(x: -194.4, y: 145.2))
        bezierPath.addLine(to: CGPoint(x: -154.3, y: 185.2))
        bezierPath.addCurve(to: CGPoint(x: -133.4, y: 193.9), controlPoint1: CGPoint(x: -148.7, y: 190.8), controlPoint2: CGPoint(x: -141.3, y: 193.9))
        bezierPath.addCurve(to: CGPoint(x: -116.3, y: 188.4), controlPoint1: CGPoint(x: -127.2, y: 193.9), controlPoint2: CGPoint(x: -121.3, y: 192))
        bezierPath.addLine(to: CGPoint(x: -88.2, y: 168.4))
        bezierPath.addCurve(to: CGPoint(x: -56.6, y: 181.4), controlPoint1: CGPoint(x: -78.1, y: 173.7), controlPoint2: CGPoint(x: -67.5, y: 178))
        bezierPath.addLine(to: CGPoint(x: -51, y: 215))
        bezierPath.addCurve(to: CGPoint(x: -21.8, y: 239.7), controlPoint1: CGPoint(x: -48.6, y: 229.3), controlPoint2: CGPoint(x: -36.3, y: 239.7))
        bezierPath.addLine(to: CGPoint(x: 20.4, y: 239.7))
        bezierPath.addCurve(to: CGPoint(x: 49.6, y: 215), controlPoint1: CGPoint(x: 34.9, y: 239.7), controlPoint2: CGPoint(x: 47.2, y: 229.3))
        bezierPath.addLine(to: CGPoint(x: 55.3, y: 181.4))
        bezierPath.addCurve(to: CGPoint(x: 87.9, y: 167.9), controlPoint1: CGPoint(x: 66.6, y: 177.9), controlPoint2: CGPoint(x: 77.5, y: 173.4))
        bezierPath.addLine(to: CGPoint(x: 115.6, y: 187.7))
        bezierPath.addCurve(to: CGPoint(x: 132.8, y: 193.2), controlPoint1: CGPoint(x: 120.6, y: 191.3), controlPoint2: CGPoint(x: 126.6, y: 193.2))
        bezierPath.addLine(to: CGPoint(x: 132.8, y: 193.2))
        bezierPath.addCurve(to: CGPoint(x: 153.7, y: 184.5), controlPoint1: CGPoint(x: 140.7, y: 193.2), controlPoint2: CGPoint(x: 148.1, y: 190.1))
        bezierPath.addLine(to: CGPoint(x: 183.5, y: 154.7))
        bezierPath.addCurve(to: CGPoint(x: 186.7, y: 116.6), controlPoint1: CGPoint(x: 193.7, y: 144.5), controlPoint2: CGPoint(x: 195.1, y: 128.4))
        bezierPath.addLine(to: CGPoint(x: 166.9, y: 88.8))
        bezierPath.addCurve(to: CGPoint(x: 180.4, y: 56.2), controlPoint1: CGPoint(x: 172.4, y: 78.3), controlPoint2: CGPoint(x: 177, y: 67.4))
        bezierPath.addLine(to: CGPoint(x: 214, y: 50.6))
        bezierPath.addCurve(to: CGPoint(x: 238.7, y: 21.4), controlPoint1: CGPoint(x: 228.3, y: 48.2), controlPoint2: CGPoint(x: 238.7, y: 35.9))
        bezierPath.addLine(to: CGPoint(x: 238.7, y: -20.7))
        bezierPath.addCurve(to: CGPoint(x: 214.2, y: -49.9), controlPoint1: CGPoint(x: 238.9, y: -35.2), controlPoint2: CGPoint(x: 228.5, y: -47.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 211.9, y: 21.4))
        bezierPath.addCurve(to: CGPoint(x: 209.7, y: 24), controlPoint1: CGPoint(x: 211.9, y: 22.7), controlPoint2: CGPoint(x: 211, y: 23.8))
        bezierPath.addLine(to: CGPoint(x: 167.7, y: 31))
        bezierPath.addCurve(to: CGPoint(x: 156.9, y: 40.9), controlPoint1: CGPoint(x: 162.4, y: 31.9), controlPoint2: CGPoint(x: 158.2, y: 35.8))
        bezierPath.addCurve(to: CGPoint(x: 139.5, y: 82.8), controlPoint1: CGPoint(x: 153.1, y: 55.6), controlPoint2: CGPoint(x: 147.3, y: 69.7))
        bezierPath.addCurve(to: CGPoint(x: 140.1, y: 97.5), controlPoint1: CGPoint(x: 136.8, y: 87.4), controlPoint2: CGPoint(x: 137, y: 93.1))
        bezierPath.addLine(to: CGPoint(x: 164.8, y: 132.3))
        bezierPath.addCurve(to: CGPoint(x: 164.5, y: 135.7), controlPoint1: CGPoint(x: 165.5, y: 133.3), controlPoint2: CGPoint(x: 165.4, y: 134.8))
        bezierPath.addLine(to: CGPoint(x: 134.7, y: 165.5))
        bezierPath.addCurve(to: CGPoint(x: 132.8, y: 166.3), controlPoint1: CGPoint(x: 134, y: 166.2), controlPoint2: CGPoint(x: 133.3, y: 166.3))
        bezierPath.addCurve(to: CGPoint(x: 131.3, y: 165.8), controlPoint1: CGPoint(x: 132.2, y: 166.3), controlPoint2: CGPoint(x: 131.7, y: 166.1))
        bezierPath.addLine(to: CGPoint(x: 96.6, y: 141.1))
        bezierPath.addCurve(to: CGPoint(x: 81.9, y: 140.5), controlPoint1: CGPoint(x: 92.3, y: 138), controlPoint2: CGPoint(x: 86.5, y: 137.8))
        bezierPath.addCurve(to: CGPoint(x: 40, y: 157.9), controlPoint1: CGPoint(x: 68.8, y: 148.3), controlPoint2: CGPoint(x: 54.7, y: 154.1))
        bezierPath.addCurve(to: CGPoint(x: 30.1, y: 168.7), controlPoint1: CGPoint(x: 34.8, y: 159.2), controlPoint2: CGPoint(x: 30.9, y: 163.5))
        bezierPath.addLine(to: CGPoint(x: 23, y: 210.7))
        bezierPath.addCurve(to: CGPoint(x: 20.4, y: 212.9), controlPoint1: CGPoint(x: 22.8, y: 212), controlPoint2: CGPoint(x: 21.7, y: 212.9))
        bezierPath.addLine(to: CGPoint(x: -21.7, y: 212.9))
        bezierPath.addCurve(to: CGPoint(x: -24.3, y: 210.7), controlPoint1: CGPoint(x: -23, y: 212.9), controlPoint2: CGPoint(x: -24.1, y: 212))
        bezierPath.addLine(to: CGPoint(x: -31.3, y: 168.7))
        bezierPath.addCurve(to: CGPoint(x: -41.2, y: 157.9), controlPoint1: CGPoint(x: -32.2, y: 163.4), controlPoint2: CGPoint(x: -36.1, y: 159.2))
        bezierPath.addCurve(to: CGPoint(x: -82.2, y: 141.1), controlPoint1: CGPoint(x: -55.5, y: 154.2), controlPoint2: CGPoint(x: -69.3, y: 148.5))
        bezierPath.addCurve(to: CGPoint(x: -89, y: 139.3), controlPoint1: CGPoint(x: -84.3, y: 139.9), controlPoint2: CGPoint(x: -86.7, y: 139.3))
        bezierPath.addCurve(to: CGPoint(x: -96.8, y: 141.8), controlPoint1: CGPoint(x: -91.7, y: 139.3), controlPoint2: CGPoint(x: -94.5, y: 140.1))
        bezierPath.addLine(to: CGPoint(x: -131.8, y: 166.7))
        bezierPath.addCurve(to: CGPoint(x: -133.3, y: 167.2), controlPoint1: CGPoint(x: -132.3, y: 167), controlPoint2: CGPoint(x: -132.8, y: 167.2))
        bezierPath.addCurve(to: CGPoint(x: -135.2, y: 166.4), controlPoint1: CGPoint(x: -133.7, y: 167.2), controlPoint2: CGPoint(x: -134.5, y: 167.1))
        bezierPath.addLine(to: CGPoint(x: -165, y: 136.6))
        bezierPath.addCurve(to: CGPoint(x: -165.3, y: 133.2), controlPoint1: CGPoint(x: -165.9, y: 135.7), controlPoint2: CGPoint(x: -166, y: 134.3))
        bezierPath.addLine(to: CGPoint(x: -140.7, y: 98.7))
        bezierPath.addCurve(to: CGPoint(x: -140.1, y: 83.9), controlPoint1: CGPoint(x: -137.6, y: 94.3), controlPoint2: CGPoint(x: -137.4, y: 88.5))
        bezierPath.addCurve(to: CGPoint(x: -157.7, y: 42.1), controlPoint1: CGPoint(x: -147.9, y: 70.9), controlPoint2: CGPoint(x: -153.9, y: 56.8))
        bezierPath.addCurve(to: CGPoint(x: -168.5, y: 32.2), controlPoint1: CGPoint(x: -159.1, y: 37), controlPoint2: CGPoint(x: -163.3, y: 33.1))
        bezierPath.addLine(to: CGPoint(x: -210.8, y: 25))
        bezierPath.addCurve(to: CGPoint(x: -213, y: 22.4), controlPoint1: CGPoint(x: -212.1, y: 24.8), controlPoint2: CGPoint(x: -213, y: 23.7))
        bezierPath.addLine(to: CGPoint(x: -213, y: -19.7))
        bezierPath.addCurve(to: CGPoint(x: -210.8, y: -22.3), controlPoint1: CGPoint(x: -213, y: -21), controlPoint2: CGPoint(x: -212.1, y: -22.1))
        bezierPath.addLine(to: CGPoint(x: -169.1, y: -29.3))
        bezierPath.addCurve(to: CGPoint(x: -158.2, y: -39.3), controlPoint1: CGPoint(x: -163.8, y: -30.2), controlPoint2: CGPoint(x: -159.5, y: -34.1))
        bezierPath.addCurve(to: CGPoint(x: -141.1, y: -81.3), controlPoint1: CGPoint(x: -154.5, y: -54), controlPoint2: CGPoint(x: -148.8, y: -68.2))
        bezierPath.addCurve(to: CGPoint(x: -141.8, y: -95.9), controlPoint1: CGPoint(x: -138.4, y: -85.9), controlPoint2: CGPoint(x: -138.7, y: -91.6))
        bezierPath.addLine(to: CGPoint(x: -166.7, y: -130.9))
        bezierPath.addCurve(to: CGPoint(x: -166.4, y: -134.3), controlPoint1: CGPoint(x: -167.4, y: -131.9), controlPoint2: CGPoint(x: -167.3, y: -133.4))
        bezierPath.addLine(to: CGPoint(x: -136.6, y: -164.1))
        bezierPath.addCurve(to: CGPoint(x: -134.7, y: -164.9), controlPoint1: CGPoint(x: -135.9, y: -164.8), controlPoint2: CGPoint(x: -135.2, y: -164.9))
        bezierPath.addCurve(to: CGPoint(x: -133.2, y: -164.4), controlPoint1: CGPoint(x: -134.1, y: -164.9), controlPoint2: CGPoint(x: -133.6, y: -164.7))
        bezierPath.addLine(to: CGPoint(x: -98.7, y: -139.8))
        bezierPath.addCurve(to: CGPoint(x: -83.9, y: -139.2), controlPoint1: CGPoint(x: -94.3, y: -136.7), controlPoint2: CGPoint(x: -88.5, y: -136.5))
        bezierPath.addCurve(to: CGPoint(x: -42.1, y: -156.8), controlPoint1: CGPoint(x: -70.9, y: -147), controlPoint2: CGPoint(x: -56.8, y: -153))
        bezierPath.addCurve(to: CGPoint(x: -32.2, y: -167.6), controlPoint1: CGPoint(x: -37, y: -158.2), controlPoint2: CGPoint(x: -33.1, y: -162.4))
        bezierPath.addLine(to: CGPoint(x: -25, y: -209.9))
        bezierPath.addCurve(to: CGPoint(x: -22.4, y: -212.1), controlPoint1: CGPoint(x: -24.8, y: -211.2), controlPoint2: CGPoint(x: -23.7, y: -212.1))
        bezierPath.addLine(to: CGPoint(x: 19.7, y: -212.1))
        bezierPath.addCurve(to: CGPoint(x: 22.3, y: -209.9), controlPoint1: CGPoint(x: 21, y: -212.1), controlPoint2: CGPoint(x: 22.1, y: -211.2))
        bezierPath.addLine(to: CGPoint(x: 29.3, y: -168.2))
        bezierPath.addCurve(to: CGPoint(x: 39.3, y: -157.3), controlPoint1: CGPoint(x: 30.2, y: -162.9), controlPoint2: CGPoint(x: 34.1, y: -158.6))
        bezierPath.addCurve(to: CGPoint(x: 82.2, y: -139.7), controlPoint1: CGPoint(x: 54.4, y: -153.5), controlPoint2: CGPoint(x: 68.8, y: -147.6))
        bezierPath.addCurve(to: CGPoint(x: 96.9, y: -140.3), controlPoint1: CGPoint(x: 86.8, y: -137), controlPoint2: CGPoint(x: 92.5, y: -137.2))
        bezierPath.addLine(to: CGPoint(x: 131.4, y: -165.1))
        bezierPath.addCurve(to: CGPoint(x: 132.9, y: -165.6), controlPoint1: CGPoint(x: 131.9, y: -165.4), controlPoint2: CGPoint(x: 132.4, y: -165.6))
        bezierPath.addCurve(to: CGPoint(x: 134.8, y: -164.8), controlPoint1: CGPoint(x: 133.3, y: -165.6), controlPoint2: CGPoint(x: 134.1, y: -165.5))
        bezierPath.addLine(to: CGPoint(x: 164.6, y: -135))
        bezierPath.addCurve(to: CGPoint(x: 164.9, y: -131.6), controlPoint1: CGPoint(x: 165.5, y: -134.1), controlPoint2: CGPoint(x: 165.6, y: -132.7))
        bezierPath.addLine(to: CGPoint(x: 140.2, y: -96.9))
        bezierPath.addCurve(to: CGPoint(x: 139.6, y: -82.2), controlPoint1: CGPoint(x: 137.1, y: -92.6), controlPoint2: CGPoint(x: 136.9, y: -86.8))
        bezierPath.addCurve(to: CGPoint(x: 157, y: -40.3), controlPoint1: CGPoint(x: 147.4, y: -69.1), controlPoint2: CGPoint(x: 153.2, y: -55))
        bezierPath.addCurve(to: CGPoint(x: 167.8, y: -30.4), controlPoint1: CGPoint(x: 158.3, y: -35.1), controlPoint2: CGPoint(x: 162.6, y: -31.2))
        bezierPath.addLine(to: CGPoint(x: 209.8, y: -23.3))
        bezierPath.addCurve(to: CGPoint(x: 212, y: -20.7), controlPoint1: CGPoint(x: 211.1, y: -23.1), controlPoint2: CGPoint(x: 212, y: -22))
        bezierPath.addLine(to: CGPoint(x: 212, y: 21.4))
        bezierPath.addLine(to: CGPoint(x: 211.9, y: 21.4))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -0.6, y: -103))
        bezier2Path.addCurve(to: CGPoint(x: -103.9, y: 0.3), controlPoint1: CGPoint(x: -57.6, y: -103), controlPoint2: CGPoint(x: -103.9, y: -56.7))
        bezier2Path.addCurve(to: CGPoint(x: -0.6, y: 103.6), controlPoint1: CGPoint(x: -103.9, y: 57.3), controlPoint2: CGPoint(x: -57.6, y: 103.6))
        bezier2Path.addCurve(to: CGPoint(x: 102.7, y: 0.3), controlPoint1: CGPoint(x: 56.4, y: 103.6), controlPoint2: CGPoint(x: 102.7, y: 57.3))
        bezier2Path.addCurve(to: CGPoint(x: -0.6, y: -103), controlPoint1: CGPoint(x: 102.7, y: -56.7), controlPoint2: CGPoint(x: 56.4, y: -103))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: -0.6, y: 76.6))
        bezier2Path.addCurve(to: CGPoint(x: -76.9, y: 0.3), controlPoint1: CGPoint(x: -42.7, y: 76.6), controlPoint2: CGPoint(x: -76.9, y: 42.4))
        bezier2Path.addCurve(to: CGPoint(x: -0.6, y: -76), controlPoint1: CGPoint(x: -76.9, y: -41.8), controlPoint2: CGPoint(x: -42.7, y: -76))
        bezier2Path.addCurve(to: CGPoint(x: 75.7, y: 0.3), controlPoint1: CGPoint(x: 41.5, y: -76), controlPoint2: CGPoint(x: 75.7, y: -41.8))
        bezier2Path.addCurve(to: CGPoint(x: -0.6, y: 76.6), controlPoint1: CGPoint(x: 75.7, y: 42.4), controlPoint2: CGPoint(x: 41.5, y: 76.6))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDropCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 255, height: 255), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 255, height: 255), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 255, y: resizedFrame.height / 255)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 128, y: 127)
        context.scaleBy(x: 0.8, y: 0.8)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -128, y: -63.25))
        bezierPath.addLine(to: CGPoint(x: -0.5, y: 64.25))
        bezierPath.addLine(to: CGPoint(x: 127, y: -63.25))
        bezierPath.addLine(to: CGPoint(x: -128, y: -63.25))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawUpCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 255, height: 255), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 255, height: 255), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 255, y: resizedFrame.height / 255)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 128, y: 127.2)
        context.scaleBy(x: 0.8, y: 0.8)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -128, y: 64.25))
        bezierPath.addLine(to: CGPoint(x: -0.5, y: -63.25))
        bezierPath.addLine(to: CGPoint(x: 127, y: 64.25))
        bezierPath.addLine(to: CGPoint(x: -128, y: 64.25))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCheckedCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 427, height: 427), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 427, height: 427), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 427, y: resizedFrame.height / 427)


        //// Group
        context.saveGState()
        context.translateBy(x: 213, y: 214)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0.33, y: -214))
        bezier2Path.addCurve(to: CGPoint(x: -213, y: -0.67), controlPoint1: CGPoint(x: -117.48, y: -214), controlPoint2: CGPoint(x: -213, y: -118.49))
        bezier2Path.addCurve(to: CGPoint(x: 0.33, y: 212.67), controlPoint1: CGPoint(x: -213, y: 117.15), controlPoint2: CGPoint(x: -117.48, y: 212.67))
        bezier2Path.addCurve(to: CGPoint(x: 213.67, y: -0.67), controlPoint1: CGPoint(x: 118.16, y: 212.67), controlPoint2: CGPoint(x: 213.67, y: 117.15))
        bezier2Path.addCurve(to: CGPoint(x: 0.33, y: -214), controlPoint1: CGPoint(x: 213.67, y: -118.49), controlPoint2: CGPoint(x: 118.16, y: -214))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: -38.8, y: 108.92))
        bezier2Path.addLine(to: CGPoint(x: -132.74, y: 14.99))
        bezier2Path.addLine(to: CGPoint(x: -101.43, y: -16.32))
        bezier2Path.addLine(to: CGPoint(x: -38.8, y: 46.3))
        bezier2Path.addLine(to: CGPoint(x: 102.09, y: -94.6))
        bezier2Path.addLine(to: CGPoint(x: 133.4, y: -63.29))
        bezier2Path.addLine(to: CGPoint(x: -38.8, y: 108.92))
        bezier2Path.close()
        theme.setStroke()
        bezier2Path.lineWidth = 10
        bezier2Path.miterLimit = 4
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: -38.8, y: 108.92))
        bezier3Path.addLine(to: CGPoint(x: -132.74, y: 14.99))
        bezier3Path.addLine(to: CGPoint(x: -101.43, y: -16.32))
        bezier3Path.addLine(to: CGPoint(x: -38.8, y: 46.3))
        bezier3Path.addLine(to: CGPoint(x: 102.09, y: -94.6))
        bezier3Path.addLine(to: CGPoint(x: 133.4, y: -63.29))
        bezier3Path.addLine(to: CGPoint(x: -38.8, y: 108.92))
        bezier3Path.close()
        theme.setFill()
        bezier3Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCross(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 476, height: 476), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 476, height: 476), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 476, y: resizedFrame.height / 476)


        //// Group 2
        context.saveGState()
        context.translateBy(x: 238, y: 238)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 167.6, y: -168.4))
        bezierPath.addCurve(to: CGPoint(x: -0.4, y: -238), controlPoint1: CGPoint(x: 122.7, y: -213.3), controlPoint2: CGPoint(x: 63.1, y: -238))
        bezierPath.addCurve(to: CGPoint(x: -168.4, y: -168.4), controlPoint1: CGPoint(x: -63.9, y: -238), controlPoint2: CGPoint(x: -123.5, y: -213.3))
        bezierPath.addCurve(to: CGPoint(x: -238, y: -0.4), controlPoint1: CGPoint(x: -213.3, y: -123.5), controlPoint2: CGPoint(x: -238, y: -63.9))
        bezierPath.addCurve(to: CGPoint(x: -168.4, y: 167.6), controlPoint1: CGPoint(x: -238, y: 63.1), controlPoint2: CGPoint(x: -213.3, y: 122.7))
        bezierPath.addCurve(to: CGPoint(x: -0.4, y: 237.2), controlPoint1: CGPoint(x: -123.5, y: 212.5), controlPoint2: CGPoint(x: -63.9, y: 237.2))
        bezierPath.addCurve(to: CGPoint(x: 167.6, y: 167.6), controlPoint1: CGPoint(x: 63.1, y: 237.2), controlPoint2: CGPoint(x: 122.7, y: 212.5))
        bezierPath.addCurve(to: CGPoint(x: 237.2, y: -0.4), controlPoint1: CGPoint(x: 212.5, y: 122.7), controlPoint2: CGPoint(x: 237.2, y: 63.1))
        bezierPath.addCurve(to: CGPoint(x: 167.6, y: -168.4), controlPoint1: CGPoint(x: 237.2, y: -63.9), controlPoint2: CGPoint(x: 212.5, y: -123.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 148.5, y: 148.5))
        bezierPath.addCurve(to: CGPoint(x: -0.4, y: 210.2), controlPoint1: CGPoint(x: 108.7, y: 188.3), controlPoint2: CGPoint(x: 55.8, y: 210.2))
        bezierPath.addCurve(to: CGPoint(x: -149.3, y: 148.5), controlPoint1: CGPoint(x: -56.6, y: 210.2), controlPoint2: CGPoint(x: -109.5, y: 188.3))
        bezierPath.addCurve(to: CGPoint(x: -149.3, y: -149.3), controlPoint1: CGPoint(x: -231.4, y: 66.4), controlPoint2: CGPoint(x: -231.4, y: -67.2))
        bezierPath.addCurve(to: CGPoint(x: -0.4, y: -211), controlPoint1: CGPoint(x: -109.5, y: -189.1), controlPoint2: CGPoint(x: -56.6, y: -211))
        bezierPath.addCurve(to: CGPoint(x: 148.5, y: -149.3), controlPoint1: CGPoint(x: 55.8, y: -211), controlPoint2: CGPoint(x: 108.7, y: -189.1))
        bezierPath.addCurve(to: CGPoint(x: 148.5, y: 148.5), controlPoint1: CGPoint(x: 230.6, y: -67.2), controlPoint2: CGPoint(x: 230.6, y: 66.4))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 104.3, y: -105.1))
        bezier2Path.addCurve(to: CGPoint(x: 85.2, y: -105.1), controlPoint1: CGPoint(x: 99, y: -110.4), controlPoint2: CGPoint(x: 90.5, y: -110.4))
        bezier2Path.addLine(to: CGPoint(x: -0.4, y: -19.5))
        bezier2Path.addLine(to: CGPoint(x: -86, y: -105.1))
        bezier2Path.addCurve(to: CGPoint(x: -105.1, y: -105.1), controlPoint1: CGPoint(x: -91.3, y: -110.4), controlPoint2: CGPoint(x: -99.8, y: -110.4))
        bezier2Path.addCurve(to: CGPoint(x: -105.1, y: -86), controlPoint1: CGPoint(x: -110.4, y: -99.8), controlPoint2: CGPoint(x: -110.4, y: -91.3))
        bezier2Path.addLine(to: CGPoint(x: -19.5, y: -0.4))
        bezier2Path.addLine(to: CGPoint(x: -105.1, y: 85.2))
        bezier2Path.addCurve(to: CGPoint(x: -105.1, y: 104.3), controlPoint1: CGPoint(x: -110.4, y: 90.5), controlPoint2: CGPoint(x: -110.4, y: 99))
        bezier2Path.addCurve(to: CGPoint(x: -95.6, y: 108.3), controlPoint1: CGPoint(x: -102.5, y: 106.9), controlPoint2: CGPoint(x: -99, y: 108.3))
        bezier2Path.addCurve(to: CGPoint(x: -86.1, y: 104.3), controlPoint1: CGPoint(x: -92.2, y: 108.3), controlPoint2: CGPoint(x: -88.7, y: 107))
        bezier2Path.addLine(to: CGPoint(x: -0.5, y: 18.7))
        bezier2Path.addLine(to: CGPoint(x: 85.1, y: 104.3))
        bezier2Path.addCurve(to: CGPoint(x: 94.6, y: 108.3), controlPoint1: CGPoint(x: 87.7, y: 106.9), controlPoint2: CGPoint(x: 91.2, y: 108.3))
        bezier2Path.addCurve(to: CGPoint(x: 104.1, y: 104.3), controlPoint1: CGPoint(x: 98.1, y: 108.3), controlPoint2: CGPoint(x: 101.5, y: 107))
        bezier2Path.addCurve(to: CGPoint(x: 104.1, y: 85.2), controlPoint1: CGPoint(x: 109.4, y: 99), controlPoint2: CGPoint(x: 109.4, y: 90.5))
        bezier2Path.addLine(to: CGPoint(x: 18.7, y: -0.4))
        bezier2Path.addLine(to: CGPoint(x: 104.3, y: -86))
        bezier2Path.addCurve(to: CGPoint(x: 104.3, y: -105.1), controlPoint1: CGPoint(x: 109.6, y: -91.3), controlPoint2: CGPoint(x: 109.6, y: -99.8))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawUserCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 28, y: 27)
        context.scaleBy(x: 0.8, y: 0.8)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 27, y: 0.5))
        bezierPath.addCurve(to: CGPoint(x: -0.5, y: -27), controlPoint1: CGPoint(x: 27, y: -14.66), controlPoint2: CGPoint(x: 14.66, y: -27))
        bezierPath.addCurve(to: CGPoint(x: -28, y: 0.5), controlPoint1: CGPoint(x: -15.66, y: -27), controlPoint2: CGPoint(x: -28, y: -14.66))
        bezierPath.addCurve(to: CGPoint(x: -19.07, y: 20.76), controlPoint1: CGPoint(x: -28, y: 8.51), controlPoint2: CGPoint(x: -24.56, y: 15.73))
        bezierPath.addLine(to: CGPoint(x: -19.1, y: 20.78))
        bezierPath.addLine(to: CGPoint(x: -18.21, y: 21.53))
        bezierPath.addCurve(to: CGPoint(x: -18.03, y: 21.67), controlPoint1: CGPoint(x: -18.15, y: 21.58), controlPoint2: CGPoint(x: -18.09, y: 21.62))
        bezierPath.addCurve(to: CGPoint(x: -16.56, y: 22.8), controlPoint1: CGPoint(x: -17.55, y: 22.06), controlPoint2: CGPoint(x: -17.06, y: 22.44))
        bezierPath.addCurve(to: CGPoint(x: -16.07, y: 23.15), controlPoint1: CGPoint(x: -16.4, y: 22.91), controlPoint2: CGPoint(x: -16.24, y: 23.03))
        bezierPath.addCurve(to: CGPoint(x: -14.43, y: 24.19), controlPoint1: CGPoint(x: -15.54, y: 23.51), controlPoint2: CGPoint(x: -14.99, y: 23.86))
        bezierPath.addCurve(to: CGPoint(x: -14.06, y: 24.41), controlPoint1: CGPoint(x: -14.31, y: 24.27), controlPoint2: CGPoint(x: -14.19, y: 24.34))
        bezierPath.addCurve(to: CGPoint(x: -12.18, y: 25.39), controlPoint1: CGPoint(x: -13.45, y: 24.75), controlPoint2: CGPoint(x: -12.83, y: 25.08))
        bezierPath.addCurve(to: CGPoint(x: -12.04, y: 25.45), controlPoint1: CGPoint(x: -12.14, y: 25.41), controlPoint2: CGPoint(x: -12.09, y: 25.43))
        bezierPath.addCurve(to: CGPoint(x: -5.39, y: 27.55), controlPoint1: CGPoint(x: -9.95, y: 26.42), controlPoint2: CGPoint(x: -7.72, y: 27.13))
        bezierPath.addCurve(to: CGPoint(x: -5.21, y: 27.59), controlPoint1: CGPoint(x: -5.33, y: 27.57), controlPoint2: CGPoint(x: -5.27, y: 27.58))
        bezierPath.addCurve(to: CGPoint(x: -3.01, y: 27.88), controlPoint1: CGPoint(x: -4.48, y: 27.71), controlPoint2: CGPoint(x: -3.75, y: 27.81))
        bezierPath.addCurve(to: CGPoint(x: -2.74, y: 27.9), controlPoint1: CGPoint(x: -2.92, y: 27.89), controlPoint2: CGPoint(x: -2.83, y: 27.89))
        bezierPath.addCurve(to: CGPoint(x: -0.5, y: 28), controlPoint1: CGPoint(x: -2, y: 27.96), controlPoint2: CGPoint(x: -1.26, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 1.72, y: 27.9), controlPoint1: CGPoint(x: 0.25, y: 28), controlPoint2: CGPoint(x: 0.99, y: 27.96))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 27.88), controlPoint1: CGPoint(x: 1.82, y: 27.89), controlPoint2: CGPoint(x: 1.91, y: 27.89))
        bezierPath.addCurve(to: CGPoint(x: 4.18, y: 27.59), controlPoint1: CGPoint(x: 2.74, y: 27.81), controlPoint2: CGPoint(x: 3.46, y: 27.72))
        bezierPath.addCurve(to: CGPoint(x: 4.37, y: 27.56), controlPoint1: CGPoint(x: 4.24, y: 27.58), controlPoint2: CGPoint(x: 4.3, y: 27.57))
        bezierPath.addCurve(to: CGPoint(x: 10.92, y: 25.5), controlPoint1: CGPoint(x: 6.66, y: 27.15), controlPoint2: CGPoint(x: 8.86, y: 26.45))
        bezierPath.addCurve(to: CGPoint(x: 11.15, y: 25.4), controlPoint1: CGPoint(x: 11, y: 25.47), controlPoint2: CGPoint(x: 11.08, y: 25.44))
        bezierPath.addCurve(to: CGPoint(x: 12.96, y: 24.47), controlPoint1: CGPoint(x: 11.77, y: 25.11), controlPoint2: CGPoint(x: 12.37, y: 24.8))
        bezierPath.addCurve(to: CGPoint(x: 13.4, y: 24.21), controlPoint1: CGPoint(x: 13.11, y: 24.38), controlPoint2: CGPoint(x: 13.26, y: 24.3))
        bezierPath.addCurve(to: CGPoint(x: 14.98, y: 23.21), controlPoint1: CGPoint(x: 13.94, y: 23.9), controlPoint2: CGPoint(x: 14.47, y: 23.56))
        bezierPath.addCurve(to: CGPoint(x: 15.53, y: 22.82), controlPoint1: CGPoint(x: 15.17, y: 23.09), controlPoint2: CGPoint(x: 15.35, y: 22.95))
        bezierPath.addCurve(to: CGPoint(x: 16.82, y: 21.84), controlPoint1: CGPoint(x: 15.97, y: 22.5), controlPoint2: CGPoint(x: 16.4, y: 22.18))
        bezierPath.addCurve(to: CGPoint(x: 17.11, y: 21.62), controlPoint1: CGPoint(x: 16.91, y: 21.76), controlPoint2: CGPoint(x: 17.01, y: 21.7))
        bezierPath.addLine(to: CGPoint(x: 18.02, y: 20.86))
        bezierPath.addLine(to: CGPoint(x: 17.99, y: 20.83))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 0.5), controlPoint1: CGPoint(x: 23.52, y: 15.8), controlPoint2: CGPoint(x: 27, y: 8.55))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: -26, y: 0.5))
        bezierPath.addCurve(to: CGPoint(x: -0.5, y: -25), controlPoint1: CGPoint(x: -26, y: -13.56), controlPoint2: CGPoint(x: -14.56, y: -25))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 0.5), controlPoint1: CGPoint(x: 13.56, y: -25), controlPoint2: CGPoint(x: 25, y: -13.56))
        bezierPath.addCurve(to: CGPoint(x: 16.41, y: 19.56), controlPoint1: CGPoint(x: 25, y: 8.08), controlPoint2: CGPoint(x: 21.67, y: 14.89))
        bezierPath.addCurve(to: CGPoint(x: 15.52, y: 19.03), controlPoint1: CGPoint(x: 16.12, y: 19.36), controlPoint2: CGPoint(x: 15.82, y: 19.18))
        bezierPath.addLine(to: CGPoint(x: 7.05, y: 14.79))
        bezierPath.addCurve(to: CGPoint(x: 5.82, y: 12.8), controlPoint1: CGPoint(x: 6.29, y: 14.41), controlPoint2: CGPoint(x: 5.82, y: 13.65))
        bezierPath.addLine(to: CGPoint(x: 5.82, y: 9.84))
        bezierPath.addCurve(to: CGPoint(x: 6.44, y: 9.03), controlPoint1: CGPoint(x: 6.02, y: 9.6), controlPoint2: CGPoint(x: 6.22, y: 9.33))
        bezierPath.addCurve(to: CGPoint(x: 9.05, y: 3.9), controlPoint1: CGPoint(x: 7.53, y: 7.48), controlPoint2: CGPoint(x: 8.41, y: 5.76))
        bezierPath.addCurve(to: CGPoint(x: 11.14, y: 0.61), controlPoint1: CGPoint(x: 10.32, y: 3.3), controlPoint2: CGPoint(x: 11.14, y: 2.04))
        bezierPath.addLine(to: CGPoint(x: 11.14, y: -2.93))
        bezierPath.addCurve(to: CGPoint(x: 10.25, y: -5.3), controlPoint1: CGPoint(x: 11.14, y: -3.8), controlPoint2: CGPoint(x: 10.82, y: -4.64))
        bezierPath.addLine(to: CGPoint(x: 10.25, y: -9.97))
        bezierPath.addCurve(to: CGPoint(x: 8.37, y: -15.83), controlPoint1: CGPoint(x: 10.3, y: -10.49), controlPoint2: CGPoint(x: 10.49, y: -13.41))
        bezierPath.addCurve(to: CGPoint(x: -0.5, y: -19), controlPoint1: CGPoint(x: 6.52, y: -17.94), controlPoint2: CGPoint(x: 3.54, y: -19))
        bezierPath.addCurve(to: CGPoint(x: -9.37, y: -15.83), controlPoint1: CGPoint(x: -4.54, y: -19), controlPoint2: CGPoint(x: -7.52, y: -17.94))
        bezierPath.addCurve(to: CGPoint(x: -11.25, y: -9.97), controlPoint1: CGPoint(x: -11.49, y: -13.42), controlPoint2: CGPoint(x: -11.3, y: -10.49))
        bezierPath.addLine(to: CGPoint(x: -11.25, y: -5.3))
        bezierPath.addCurve(to: CGPoint(x: -12.14, y: -2.93), controlPoint1: CGPoint(x: -11.82, y: -4.64), controlPoint2: CGPoint(x: -12.14, y: -3.8))
        bezierPath.addLine(to: CGPoint(x: -12.14, y: 0.61))
        bezierPath.addCurve(to: CGPoint(x: -10.8, y: 3.43), controlPoint1: CGPoint(x: -12.14, y: 1.71), controlPoint2: CGPoint(x: -11.64, y: 2.74))
        bezierPath.addCurve(to: CGPoint(x: -7.7, y: 9.82), controlPoint1: CGPoint(x: -9.99, y: 6.61), controlPoint2: CGPoint(x: -8.32, y: 9.01))
        bezierPath.addLine(to: CGPoint(x: -7.7, y: 12.72))
        bezierPath.addCurve(to: CGPoint(x: -8.87, y: 14.67), controlPoint1: CGPoint(x: -7.7, y: 13.53), controlPoint2: CGPoint(x: -8.15, y: 14.28))
        bezierPath.addLine(to: CGPoint(x: -16.77, y: 18.99))
        bezierPath.addCurve(to: CGPoint(x: -17.52, y: 19.46), controlPoint1: CGPoint(x: -17.02, y: 19.12), controlPoint2: CGPoint(x: -17.27, y: 19.28))
        bezierPath.addCurve(to: CGPoint(x: -26, y: 0.5), controlPoint1: CGPoint(x: -22.72, y: 14.79), controlPoint2: CGPoint(x: -26, y: 8.02))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawEmailCanvase(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 484, height: 484), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 484, height: 484), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 484, y: resizedFrame.height / 484)


        //// Group 2
        context.saveGState()
        context.translateBy(x: 242, y: 242)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 182.3, y: -184.25))
        bezierPath.addLine(to: CGPoint(x: -182.9, y: -184.25))
        bezierPath.addCurve(to: CGPoint(x: -242, y: -125.15), controlPoint1: CGPoint(x: -215.5, y: -184.25), controlPoint2: CGPoint(x: -242, y: -157.75))
        bezierPath.addLine(to: CGPoint(x: -242, y: 124.45))
        bezierPath.addCurve(to: CGPoint(x: -182.9, y: 183.55), controlPoint1: CGPoint(x: -242, y: 157.05), controlPoint2: CGPoint(x: -215.5, y: 183.55))
        bezierPath.addLine(to: CGPoint(x: 182.2, y: 183.55))
        bezierPath.addCurve(to: CGPoint(x: 241.3, y: 124.45), controlPoint1: CGPoint(x: 214.8, y: 183.55), controlPoint2: CGPoint(x: 241.3, y: 157.05))
        bezierPath.addLine(to: CGPoint(x: 241.3, y: -125.05))
        bezierPath.addCurve(to: CGPoint(x: 182.3, y: -184.25), controlPoint1: CGPoint(x: 241.4, y: -157.65), controlPoint2: CGPoint(x: 214.9, y: -184.25))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 214.4, y: 124.45))
        bezierPath.addCurve(to: CGPoint(x: 182.3, y: 156.55), controlPoint1: CGPoint(x: 214.4, y: 142.15), controlPoint2: CGPoint(x: 200, y: 156.55))
        bezierPath.addLine(to: CGPoint(x: -182.9, y: 156.55))
        bezierPath.addCurve(to: CGPoint(x: -215, y: 124.45), controlPoint1: CGPoint(x: -200.6, y: 156.55), controlPoint2: CGPoint(x: -215, y: 142.15))
        bezierPath.addLine(to: CGPoint(x: -215, y: -125.05))
        bezierPath.addCurve(to: CGPoint(x: -182.9, y: -157.15), controlPoint1: CGPoint(x: -215, y: -142.75), controlPoint2: CGPoint(x: -200.6, y: -157.15))
        bezierPath.addLine(to: CGPoint(x: 182.2, y: -157.15))
        bezierPath.addCurve(to: CGPoint(x: 214.3, y: -125.05), controlPoint1: CGPoint(x: 199.9, y: -157.15), controlPoint2: CGPoint(x: 214.3, y: -142.75))
        bezierPath.addLine(to: CGPoint(x: 214.3, y: 124.45))
        bezierPath.addLine(to: CGPoint(x: 214.4, y: 124.45))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 62.8, y: -3.45))
        bezier2Path.addLine(to: CGPoint(x: 181, y: -109.45))
        bezier2Path.addCurve(to: CGPoint(x: 182, y: -128.55), controlPoint1: CGPoint(x: 186.5, y: -114.45), controlPoint2: CGPoint(x: 187, y: -122.95))
        bezier2Path.addCurve(to: CGPoint(x: 162.9, y: -129.55), controlPoint1: CGPoint(x: 177, y: -134.05), controlPoint2: CGPoint(x: 168.5, y: -134.55))
        bezier2Path.addLine(to: CGPoint(x: -0.1, y: 16.75))
        bezier2Path.addLine(to: CGPoint(x: -31.9, y: -11.65))
        bezier2Path.addCurve(to: CGPoint(x: -32.1, y: -11.95), controlPoint1: CGPoint(x: -32, y: -11.75), controlPoint2: CGPoint(x: -32.1, y: -11.85))
        bezier2Path.addCurve(to: CGPoint(x: -34.3, y: -13.85), controlPoint1: CGPoint(x: -32.8, y: -12.65), controlPoint2: CGPoint(x: -33.5, y: -13.25))
        bezier2Path.addLine(to: CGPoint(x: -163.7, y: -129.65))
        bezier2Path.addCurve(to: CGPoint(x: -182.8, y: -128.55), controlPoint1: CGPoint(x: -169.3, y: -134.65), controlPoint2: CGPoint(x: -177.8, y: -134.15))
        bezier2Path.addCurve(to: CGPoint(x: -181.7, y: -109.45), controlPoint1: CGPoint(x: -187.8, y: -122.95), controlPoint2: CGPoint(x: -187.3, y: -114.45))
        bezier2Path.addLine(to: CGPoint(x: -62.1, y: -2.55))
        bezier2Path.addLine(to: CGPoint(x: -181.2, y: 108.95))
        bezier2Path.addCurve(to: CGPoint(x: -181.8, y: 128.05), controlPoint1: CGPoint(x: -186.6, y: 114.05), controlPoint2: CGPoint(x: -186.9, y: 122.55))
        bezier2Path.addCurve(to: CGPoint(x: -171.9, y: 132.35), controlPoint1: CGPoint(x: -179.1, y: 130.85), controlPoint2: CGPoint(x: -175.5, y: 132.35))
        bezier2Path.addCurve(to: CGPoint(x: -162.7, y: 128.75), controlPoint1: CGPoint(x: -168.6, y: 132.35), controlPoint2: CGPoint(x: -165.3, y: 131.15))
        bezier2Path.addLine(to: CGPoint(x: -41.8, y: 15.65))
        bezier2Path.addLine(to: CGPoint(x: -9, y: 44.95))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 48.35), controlPoint1: CGPoint(x: -6.4, y: 47.25), controlPoint2: CGPoint(x: -3.2, y: 48.35))
        bezier2Path.addCurve(to: CGPoint(x: 9, y: 44.85), controlPoint1: CGPoint(x: 3.2, y: 48.35), controlPoint2: CGPoint(x: 6.5, y: 47.15))
        bezier2Path.addLine(to: CGPoint(x: 42.7, y: 14.65))
        bezier2Path.addLine(to: CGPoint(x: 162.9, y: 128.85))
        bezier2Path.addCurve(to: CGPoint(x: 172.2, y: 132.55), controlPoint1: CGPoint(x: 165.5, y: 131.35), controlPoint2: CGPoint(x: 168.9, y: 132.55))
        bezier2Path.addCurve(to: CGPoint(x: 182, y: 128.35), controlPoint1: CGPoint(x: 175.8, y: 132.55), controlPoint2: CGPoint(x: 179.3, y: 131.15))
        bezier2Path.addCurve(to: CGPoint(x: 181.5, y: 109.25), controlPoint1: CGPoint(x: 187.1, y: 122.95), controlPoint2: CGPoint(x: 186.9, y: 114.35))
        bezier2Path.addLine(to: CGPoint(x: 62.8, y: -3.45))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPasswordCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 512, height: 512), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 512, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 512, y: resizedFrame.height / 512)


        //// Group 3
        context.saveGState()
        context.translateBy(x: 256, y: 256)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -25.21, y: 98.31))
        bezierPath.addLine(to: CGPoint(x: -31.94, y: 158.82))
        bezierPath.addCurve(to: CGPoint(x: -29.28, y: 167.12), controlPoint1: CGPoint(x: -32.27, y: 161.83), controlPoint2: CGPoint(x: -31.3, y: 164.85))
        bezierPath.addCurve(to: CGPoint(x: -21.33, y: 170.67), controlPoint1: CGPoint(x: -27.26, y: 169.38), controlPoint2: CGPoint(x: -24.36, y: 170.67))
        bezierPath.addLine(to: CGPoint(x: 21.33, y: 170.67))
        bezierPath.addCurve(to: CGPoint(x: 29.28, y: 167.12), controlPoint1: CGPoint(x: 24.37, y: 170.67), controlPoint2: CGPoint(x: 27.26, y: 169.38))
        bezierPath.addCurve(to: CGPoint(x: 31.94, y: 158.82), controlPoint1: CGPoint(x: 31.3, y: 164.86), controlPoint2: CGPoint(x: 32.27, y: 161.83))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 98.31))
        bezierPath.addCurve(to: CGPoint(x: 42.67, y: 64), controlPoint1: CGPoint(x: 36.14, y: 90.37), controlPoint2: CGPoint(x: 42.67, y: 77.79))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 21.33), controlPoint1: CGPoint(x: 42.67, y: 40.47), controlPoint2: CGPoint(x: 23.53, y: 21.33))
        bezierPath.addCurve(to: CGPoint(x: -42.67, y: 64), controlPoint1: CGPoint(x: -23.53, y: 21.33), controlPoint2: CGPoint(x: -42.67, y: 40.47))
        bezierPath.addCurve(to: CGPoint(x: -25.21, y: 98.31), controlPoint1: CGPoint(x: -42.67, y: 77.79), controlPoint2: CGPoint(x: -36.13, y: 90.37))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 42.67))
        bezierPath.addCurve(to: CGPoint(x: 21.33, y: 64), controlPoint1: CGPoint(x: 11.76, y: 42.67), controlPoint2: CGPoint(x: 21.33, y: 52.24))
        bezierPath.addCurve(to: CGPoint(x: 9.21, y: 83.13), controlPoint1: CGPoint(x: 21.33, y: 72.18), controlPoint2: CGPoint(x: 16.69, y: 79.5))
        bezierPath.addCurve(to: CGPoint(x: 3.25, y: 93.91), controlPoint1: CGPoint(x: 5.13, y: 85.1), controlPoint2: CGPoint(x: 2.75, y: 89.42))
        bezierPath.addLine(to: CGPoint(x: 9.42, y: 149.33))
        bezierPath.addLine(to: CGPoint(x: -9.42, y: 149.33))
        bezierPath.addLine(to: CGPoint(x: -3.25, y: 93.91))
        bezierPath.addCurve(to: CGPoint(x: -9.21, y: 83.13), controlPoint1: CGPoint(x: -2.75, y: 89.42), controlPoint2: CGPoint(x: -5.13, y: 85.1))
        bezierPath.addCurve(to: CGPoint(x: -21.33, y: 64), controlPoint1: CGPoint(x: -16.69, y: 79.5), controlPoint2: CGPoint(x: -21.33, y: 72.18))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 42.67), controlPoint1: CGPoint(x: -21.33, y: 52.24), controlPoint2: CGPoint(x: -11.76, y: 42.67))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 181.33, y: -64))
        bezier2Path.addLine(to: CGPoint(x: 149.33, y: -64))
        bezier2Path.addLine(to: CGPoint(x: 149.33, y: -106.67))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -256), controlPoint1: CGPoint(x: 149.33, y: -189.01), controlPoint2: CGPoint(x: 82.34, y: -256))
        bezier2Path.addCurve(to: CGPoint(x: -149.33, y: -106.67), controlPoint1: CGPoint(x: -82.34, y: -256), controlPoint2: CGPoint(x: -149.33, y: -189.01))
        bezier2Path.addLine(to: CGPoint(x: -149.33, y: -64))
        bezier2Path.addLine(to: CGPoint(x: -181.33, y: -64))
        bezier2Path.addCurve(to: CGPoint(x: -192, y: -53.33), controlPoint1: CGPoint(x: -187.23, y: -64), controlPoint2: CGPoint(x: -192, y: -59.23))
        bezier2Path.addLine(to: CGPoint(x: -192, y: 213.33))
        bezier2Path.addCurve(to: CGPoint(x: -149.33, y: 256), controlPoint1: CGPoint(x: -192, y: 236.87), controlPoint2: CGPoint(x: -172.87, y: 256))
        bezier2Path.addLine(to: CGPoint(x: 149.33, y: 256))
        bezier2Path.addCurve(to: CGPoint(x: 192, y: 213.33), controlPoint1: CGPoint(x: 172.87, y: 256), controlPoint2: CGPoint(x: 192, y: 236.87))
        bezier2Path.addLine(to: CGPoint(x: 192, y: -53.33))
        bezier2Path.addCurve(to: CGPoint(x: 181.33, y: -64), controlPoint1: CGPoint(x: 192, y: -59.23), controlPoint2: CGPoint(x: 187.23, y: -64))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: -128, y: -106.67))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -234.67), controlPoint1: CGPoint(x: -128, y: -177.25), controlPoint2: CGPoint(x: -70.58, y: -234.67))
        bezier2Path.addCurve(to: CGPoint(x: 128, y: -106.67), controlPoint1: CGPoint(x: 70.58, y: -234.67), controlPoint2: CGPoint(x: 128, y: -177.25))
        bezier2Path.addLine(to: CGPoint(x: 128, y: -64))
        bezier2Path.addLine(to: CGPoint(x: 106.67, y: -64))
        bezier2Path.addLine(to: CGPoint(x: 106.67, y: -106.67))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -213.33), controlPoint1: CGPoint(x: 106.67, y: -165.48), controlPoint2: CGPoint(x: 58.81, y: -213.33))
        bezier2Path.addCurve(to: CGPoint(x: -106.67, y: -106.67), controlPoint1: CGPoint(x: -58.81, y: -213.33), controlPoint2: CGPoint(x: -106.67, y: -165.48))
        bezier2Path.addLine(to: CGPoint(x: -106.67, y: -64))
        bezier2Path.addLine(to: CGPoint(x: -128, y: -64))
        bezier2Path.addLine(to: CGPoint(x: -128, y: -106.67))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 85.33, y: -106.67))
        bezier2Path.addLine(to: CGPoint(x: 85.33, y: -64))
        bezier2Path.addLine(to: CGPoint(x: -85.33, y: -64))
        bezier2Path.addLine(to: CGPoint(x: -85.33, y: -106.67))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -192), controlPoint1: CGPoint(x: -85.33, y: -153.72), controlPoint2: CGPoint(x: -47.05, y: -192))
        bezier2Path.addCurve(to: CGPoint(x: 85.33, y: -106.67), controlPoint1: CGPoint(x: 47.05, y: -192), controlPoint2: CGPoint(x: 85.33, y: -153.72))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 170.67, y: 213.33))
        bezier2Path.addCurve(to: CGPoint(x: 149.33, y: 234.67), controlPoint1: CGPoint(x: 170.67, y: 225.09), controlPoint2: CGPoint(x: 161.09, y: 234.67))
        bezier2Path.addLine(to: CGPoint(x: -149.33, y: 234.67))
        bezier2Path.addCurve(to: CGPoint(x: -170.67, y: 213.33), controlPoint1: CGPoint(x: -161.09, y: 234.67), controlPoint2: CGPoint(x: -170.67, y: 225.09))
        bezier2Path.addLine(to: CGPoint(x: -170.67, y: -42.67))
        bezier2Path.addLine(to: CGPoint(x: 170.67, y: -42.67))
        bezier2Path.addLine(to: CGPoint(x: 170.67, y: 213.33))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCameraCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Group
        context.saveGState()
        context.translateBy(x: 30, y: 30)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 25.2, y: -14.5))
        bezierPath.addLine(to: CGPoint(x: 16.68, y: -14.5))
        bezierPath.addLine(to: CGPoint(x: 12.68, y: -24.5))
        bezierPath.addLine(to: CGPoint(x: -12.68, y: -24.5))
        bezierPath.addLine(to: CGPoint(x: -16.68, y: -14.5))
        bezierPath.addLine(to: CGPoint(x: -18, y: -14.5))
        bezierPath.addLine(to: CGPoint(x: -18, y: -19.5))
        bezierPath.addLine(to: CGPoint(x: -24, y: -19.5))
        bezierPath.addLine(to: CGPoint(x: -24, y: -14.5))
        bezierPath.addLine(to: CGPoint(x: -25.2, y: -14.5))
        bezierPath.addCurve(to: CGPoint(x: -30, y: -9.7), controlPoint1: CGPoint(x: -27.85, y: -14.5), controlPoint2: CGPoint(x: -30, y: -12.35))
        bezierPath.addLine(to: CGPoint(x: -30, y: 19.67))
        bezierPath.addCurve(to: CGPoint(x: -25.17, y: 24.5), controlPoint1: CGPoint(x: -30, y: 22.33), controlPoint2: CGPoint(x: -27.83, y: 24.5))
        bezierPath.addLine(to: CGPoint(x: 25.17, y: 24.5))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 19.67), controlPoint1: CGPoint(x: 27.83, y: 24.5), controlPoint2: CGPoint(x: 30, y: 22.33))
        bezierPath.addLine(to: CGPoint(x: 30, y: -9.7))
        bezierPath.addCurve(to: CGPoint(x: 25.2, y: -14.5), controlPoint1: CGPoint(x: 30, y: -12.35), controlPoint2: CGPoint(x: 27.85, y: -14.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: -22, y: -17.5))
        bezierPath.addLine(to: CGPoint(x: -20, y: -17.5))
        bezierPath.addLine(to: CGPoint(x: -20, y: -14.5))
        bezierPath.addLine(to: CGPoint(x: -22, y: -14.5))
        bezierPath.addLine(to: CGPoint(x: -22, y: -17.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 28, y: 19.67))
        bezierPath.addCurve(to: CGPoint(x: 25.17, y: 22.5), controlPoint1: CGPoint(x: 28, y: 21.23), controlPoint2: CGPoint(x: 26.73, y: 22.5))
        bezierPath.addLine(to: CGPoint(x: -25.17, y: 22.5))
        bezierPath.addCurve(to: CGPoint(x: -28, y: 19.67), controlPoint1: CGPoint(x: -26.73, y: 22.5), controlPoint2: CGPoint(x: -28, y: 21.23))
        bezierPath.addLine(to: CGPoint(x: -28, y: -9.7))
        bezierPath.addCurve(to: CGPoint(x: -25.2, y: -12.5), controlPoint1: CGPoint(x: -28, y: -11.24), controlPoint2: CGPoint(x: -26.74, y: -12.5))
        bezierPath.addLine(to: CGPoint(x: -24, y: -12.5))
        bezierPath.addLine(to: CGPoint(x: -18, y: -12.5))
        bezierPath.addLine(to: CGPoint(x: -15.32, y: -12.5))
        bezierPath.addLine(to: CGPoint(x: -11.32, y: -22.5))
        bezierPath.addLine(to: CGPoint(x: 11.32, y: -22.5))
        bezierPath.addLine(to: CGPoint(x: 15.32, y: -12.5))
        bezierPath.addLine(to: CGPoint(x: 25.2, y: -12.5))
        bezierPath.addCurve(to: CGPoint(x: 28, y: -9.7), controlPoint1: CGPoint(x: 26.74, y: -12.5), controlPoint2: CGPoint(x: 28, y: -11.24))
        bezierPath.addLine(to: CGPoint(x: 28, y: 19.67))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: -15.5))
        bezier2Path.addCurve(to: CGPoint(x: -18, y: 2.5), controlPoint1: CGPoint(x: -9.93, y: -15.5), controlPoint2: CGPoint(x: -18, y: -7.42))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 20.5), controlPoint1: CGPoint(x: -18, y: 12.42), controlPoint2: CGPoint(x: -9.93, y: 20.5))
        bezier2Path.addCurve(to: CGPoint(x: 18, y: 2.5), controlPoint1: CGPoint(x: 9.92, y: 20.5), controlPoint2: CGPoint(x: 18, y: 12.42))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -15.5), controlPoint1: CGPoint(x: 18, y: -7.42), controlPoint2: CGPoint(x: 9.92, y: -15.5))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 0, y: 18.5))
        bezier2Path.addCurve(to: CGPoint(x: -16, y: 2.5), controlPoint1: CGPoint(x: -8.82, y: 18.5), controlPoint2: CGPoint(x: -16, y: 11.32))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -13.5), controlPoint1: CGPoint(x: -16, y: -6.32), controlPoint2: CGPoint(x: -8.82, y: -13.5))
        bezier2Path.addCurve(to: CGPoint(x: 16, y: 2.5), controlPoint1: CGPoint(x: 8.82, y: -13.5), controlPoint2: CGPoint(x: 16, y: -6.32))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 18.5), controlPoint1: CGPoint(x: 16, y: 11.32), controlPoint2: CGPoint(x: 8.82, y: 18.5))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 0, y: -9.5))
        bezier3Path.addCurve(to: CGPoint(x: -12, y: 2.5), controlPoint1: CGPoint(x: -6.62, y: -9.5), controlPoint2: CGPoint(x: -12, y: -4.12))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 14.5), controlPoint1: CGPoint(x: -12, y: 9.12), controlPoint2: CGPoint(x: -6.62, y: 14.5))
        bezier3Path.addCurve(to: CGPoint(x: 12, y: 2.5), controlPoint1: CGPoint(x: 6.62, y: 14.5), controlPoint2: CGPoint(x: 12, y: 9.12))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: -9.5), controlPoint1: CGPoint(x: 12, y: -4.12), controlPoint2: CGPoint(x: 6.62, y: -9.5))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 0, y: 12.5))
        bezier3Path.addCurve(to: CGPoint(x: -10, y: 2.5), controlPoint1: CGPoint(x: -5.51, y: 12.5), controlPoint2: CGPoint(x: -10, y: 8.01))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: -7.5), controlPoint1: CGPoint(x: -10, y: -3.01), controlPoint2: CGPoint(x: -5.51, y: -7.5))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 2.5), controlPoint1: CGPoint(x: 5.51, y: -7.5), controlPoint2: CGPoint(x: 10, y: -3.01))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 12.5), controlPoint1: CGPoint(x: 10, y: 8.01), controlPoint2: CGPoint(x: 5.51, y: 12.5))
        bezier3Path.close()
        theme.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 22, y: -10.5))
        bezier4Path.addCurve(to: CGPoint(x: 18, y: -6.5), controlPoint1: CGPoint(x: 19.79, y: -10.5), controlPoint2: CGPoint(x: 18, y: -8.71))
        bezier4Path.addCurve(to: CGPoint(x: 22, y: -2.5), controlPoint1: CGPoint(x: 18, y: -4.29), controlPoint2: CGPoint(x: 19.79, y: -2.5))
        bezier4Path.addCurve(to: CGPoint(x: 26, y: -6.5), controlPoint1: CGPoint(x: 24.21, y: -2.5), controlPoint2: CGPoint(x: 26, y: -4.29))
        bezier4Path.addCurve(to: CGPoint(x: 22, y: -10.5), controlPoint1: CGPoint(x: 26, y: -8.71), controlPoint2: CGPoint(x: 24.21, y: -10.5))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 22, y: -4.5))
        bezier4Path.addCurve(to: CGPoint(x: 20, y: -6.5), controlPoint1: CGPoint(x: 20.9, y: -4.5), controlPoint2: CGPoint(x: 20, y: -5.4))
        bezier4Path.addCurve(to: CGPoint(x: 22, y: -8.5), controlPoint1: CGPoint(x: 20, y: -7.6), controlPoint2: CGPoint(x: 20.9, y: -8.5))
        bezier4Path.addCurve(to: CGPoint(x: 24, y: -6.5), controlPoint1: CGPoint(x: 23.1, y: -8.5), controlPoint2: CGPoint(x: 24, y: -7.6))
        bezier4Path.addCurve(to: CGPoint(x: 22, y: -4.5), controlPoint1: CGPoint(x: 24, y: -5.4), controlPoint2: CGPoint(x: 23.1, y: -4.5))
        bezier4Path.close()
        theme.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPictureCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 52, height: 52), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 52, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 52, y: resizedFrame.height / 52)


        //// Group
        context.saveGState()
        context.translateBy(x: 26, y: 26)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -12, y: -1.86))
        bezierPath.addCurve(to: CGPoint(x: -6.43, y: -7.43), controlPoint1: CGPoint(x: -8.93, y: -1.86), controlPoint2: CGPoint(x: -6.43, y: -4.36))
        bezierPath.addCurve(to: CGPoint(x: -12, y: -13), controlPoint1: CGPoint(x: -6.43, y: -10.5), controlPoint2: CGPoint(x: -8.93, y: -13))
        bezierPath.addCurve(to: CGPoint(x: -17.57, y: -7.43), controlPoint1: CGPoint(x: -15.07, y: -13), controlPoint2: CGPoint(x: -17.57, y: -10.5))
        bezierPath.addCurve(to: CGPoint(x: -12, y: -1.86), controlPoint1: CGPoint(x: -17.57, y: -4.36), controlPoint2: CGPoint(x: -15.07, y: -1.86))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: -12, y: -11))
        bezierPath.addCurve(to: CGPoint(x: -8.43, y: -7.43), controlPoint1: CGPoint(x: -10.03, y: -11), controlPoint2: CGPoint(x: -8.43, y: -9.4))
        bezierPath.addCurve(to: CGPoint(x: -12, y: -3.86), controlPoint1: CGPoint(x: -8.43, y: -5.46), controlPoint2: CGPoint(x: -10.03, y: -3.86))
        bezierPath.addCurve(to: CGPoint(x: -15.57, y: -7.43), controlPoint1: CGPoint(x: -13.97, y: -3.86), controlPoint2: CGPoint(x: -15.57, y: -5.46))
        bezierPath.addCurve(to: CGPoint(x: -12, y: -11), controlPoint1: CGPoint(x: -15.57, y: -9.4), controlPoint2: CGPoint(x: -13.97, y: -11))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -25, y: -26))
        bezier2Path.addLine(to: CGPoint(x: -25, y: 14))
        bezier2Path.addLine(to: CGPoint(x: -25, y: 26))
        bezier2Path.addLine(to: CGPoint(x: 25, y: 26))
        bezier2Path.addLine(to: CGPoint(x: 25, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 25, y: -26))
        bezier2Path.addLine(to: CGPoint(x: -25, y: -26))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: -23, y: -24))
        bezier2Path.addLine(to: CGPoint(x: 23, y: -24))
        bezier2Path.addLine(to: CGPoint(x: 23, y: 2.73))
        bezier2Path.addLine(to: CGPoint(x: 12.68, y: -6.74))
        bezier2Path.addCurve(to: CGPoint(x: 11.96, y: -7), controlPoint1: CGPoint(x: 12.48, y: -6.92), controlPoint2: CGPoint(x: 12.22, y: -7))
        bezier2Path.addCurve(to: CGPoint(x: 11.26, y: -6.67), controlPoint1: CGPoint(x: 11.69, y: -6.99), controlPoint2: CGPoint(x: 11.44, y: -6.87))
        bezier2Path.addLine(to: CGPoint(x: 1.47, y: 4.05))
        bezier2Path.addLine(to: CGPoint(x: -3.27, y: -0.69))
        bezier2Path.addCurve(to: CGPoint(x: -4.64, y: -0.73), controlPoint1: CGPoint(x: -3.65, y: -1.06), controlPoint2: CGPoint(x: -4.25, y: -1.08))
        bezier2Path.addLine(to: CGPoint(x: -21.38, y: 14))
        bezier2Path.addLine(to: CGPoint(x: -23, y: 14))
        bezier2Path.addLine(to: CGPoint(x: -23, y: -24))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 23, y: 24))
        bezier2Path.addLine(to: CGPoint(x: -23, y: 24))
        bezier2Path.addLine(to: CGPoint(x: -23, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 23, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 23, y: 24))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: -18.35, y: 14))
        bezier2Path.addLine(to: CGPoint(x: -4.03, y: 1.39))
        bezier2Path.addLine(to: CGPoint(x: 6.27, y: 11.69))
        bezier2Path.addCurve(to: CGPoint(x: 7.69, y: 11.69), controlPoint1: CGPoint(x: 6.67, y: 12.08), controlPoint2: CGPoint(x: 7.3, y: 12.08))
        bezier2Path.addCurve(to: CGPoint(x: 7.69, y: 10.28), controlPoint1: CGPoint(x: 8.08, y: 11.3), controlPoint2: CGPoint(x: 8.08, y: 10.67))
        bezier2Path.addLine(to: CGPoint(x: 2.88, y: 5.47))
        bezier2Path.addLine(to: CGPoint(x: 12.06, y: -4.59))
        bezier2Path.addLine(to: CGPoint(x: 23, y: 5.44))
        bezier2Path.addLine(to: CGPoint(x: 23, y: 14))
        bezier2Path.addLine(to: CGPoint(x: -18.35, y: 14))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLocationCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 512, height: 512), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 512, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 512, y: resizedFrame.height / 512)


        //// Group 5
        context.saveGState()
        context.translateBy(x: 256, y: 256)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Group
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: -256))
        bezierPath.addCurve(to: CGPoint(x: -180, y: -76), controlPoint1: CGPoint(x: -99.25, y: -256), controlPoint2: CGPoint(x: -180, y: -175.25))
        bezierPath.addCurve(to: CGPoint(x: -153.13, y: 18.65), controlPoint1: CGPoint(x: -180, y: -42.47), controlPoint2: CGPoint(x: -170.71, y: -9.74))
        bezierPath.addLine(to: CGPoint(x: -10.25, y: 248.91))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 256), controlPoint1: CGPoint(x: -7.51, y: 253.32), controlPoint2: CGPoint(x: -2.69, y: 256))
        bezierPath.addCurve(to: CGPoint(x: 2.62, y: 256), controlPoint1: CGPoint(x: 2.54, y: 256), controlPoint2: CGPoint(x: 2.58, y: 256))
        bezierPath.addCurve(to: CGPoint(x: 15.37, y: 248.71), controlPoint1: CGPoint(x: 7.85, y: 255.96), controlPoint2: CGPoint(x: 12.68, y: 253.2))
        bezierPath.addLine(to: CGPoint(x: 154.61, y: 16.22))
        bezierPath.addCurve(to: CGPoint(x: 180, y: -76), controlPoint1: CGPoint(x: 171.22, y: -11.57), controlPoint2: CGPoint(x: 180, y: -43.46))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -256), controlPoint1: CGPoint(x: 180, y: -175.25), controlPoint2: CGPoint(x: 99.25, y: -256))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 128.87, y: 0.82))
        bezierPath.addLine(to: CGPoint(x: 2.27, y: 212.19))
        bezierPath.addLine(to: CGPoint(x: -127.63, y: 2.85))
        bezierPath.addCurve(to: CGPoint(x: -150.2, y: -76), controlPoint1: CGPoint(x: -142.27, y: -20.79), controlPoint2: CGPoint(x: -150.2, y: -48.05))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -226.2), controlPoint1: CGPoint(x: -150.2, y: -158.71), controlPoint2: CGPoint(x: -82.71, y: -226.2))
        bezierPath.addCurve(to: CGPoint(x: 150.1, y: -76), controlPoint1: CGPoint(x: 82.71, y: -226.2), controlPoint2: CGPoint(x: 150.1, y: -158.71))
        bezierPath.addCurve(to: CGPoint(x: 128.87, y: 0.82), controlPoint1: CGPoint(x: 150.1, y: -48.88), controlPoint2: CGPoint(x: 142.69, y: -22.31))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()






        //// Group 3
        //// Group 4
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: -166))
        bezier2Path.addCurve(to: CGPoint(x: -90, y: -76), controlPoint1: CGPoint(x: -49.63, y: -166), controlPoint2: CGPoint(x: -90, y: -125.63))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: -90, y: -26.69), controlPoint2: CGPoint(x: -50.28, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 90, y: -76), controlPoint1: CGPoint(x: 50.9, y: 14), controlPoint2: CGPoint(x: 90, y: -27.23))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -166), controlPoint1: CGPoint(x: 90, y: -125.63), controlPoint2: CGPoint(x: 49.63, y: -166))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 0, y: -15.8))
        bezier2Path.addCurve(to: CGPoint(x: -60.2, y: -76), controlPoint1: CGPoint(x: -33.26, y: -15.8), controlPoint2: CGPoint(x: -60.2, y: -42.83))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -136.2), controlPoint1: CGPoint(x: -60.2, y: -109.08), controlPoint2: CGPoint(x: -33.08, y: -136.2))
        bezier2Path.addCurve(to: CGPoint(x: 60.1, y: -76), controlPoint1: CGPoint(x: 33.08, y: -136.2), controlPoint2: CGPoint(x: 60.1, y: -109.08))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -15.8), controlPoint1: CGPoint(x: 60.1, y: -43.32), controlPoint2: CGPoint(x: 33.78, y: -15.8))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()







        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawClockCanavas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Group 3
        context.saveGState()
        context.translateBy(x: 24, y: 24)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22.91, y: -3.88))
        bezierPath.addCurve(to: CGPoint(x: 22.01, y: -4.45), controlPoint1: CGPoint(x: 22.74, y: -4.23), controlPoint2: CGPoint(x: 22.4, y: -4.45))
        bezierPath.addLine(to: CGPoint(x: 19.08, y: -4.45))
        bezierPath.addCurve(to: CGPoint(x: -2.27, y: -22.22), controlPoint1: CGPoint(x: 17.22, y: -14.55), controlPoint2: CGPoint(x: 8.36, y: -22.22))
        bezierPath.addCurve(to: CGPoint(x: -24, y: -0.5), controlPoint1: CGPoint(x: -14.25, y: -22.22), controlPoint2: CGPoint(x: -24, y: -12.48))
        bezierPath.addCurve(to: CGPoint(x: -2.27, y: 21.23), controlPoint1: CGPoint(x: -24, y: 11.48), controlPoint2: CGPoint(x: -14.25, y: 21.23))
        bezierPath.addCurve(to: CGPoint(x: 16.54, y: 10.37), controlPoint1: CGPoint(x: 5.46, y: 21.23), controlPoint2: CGPoint(x: 12.67, y: 17.07))
        bezierPath.addCurve(to: CGPoint(x: 15.82, y: 7.67), controlPoint1: CGPoint(x: 17.09, y: 9.42), controlPoint2: CGPoint(x: 16.77, y: 8.22))
        bezierPath.addCurve(to: CGPoint(x: 13.12, y: 8.39), controlPoint1: CGPoint(x: 14.88, y: 7.12), controlPoint2: CGPoint(x: 13.67, y: 7.45))
        bezierPath.addCurve(to: CGPoint(x: -2.27, y: 17.28), controlPoint1: CGPoint(x: 9.95, y: 13.87), controlPoint2: CGPoint(x: 4.05, y: 17.28))
        bezierPath.addCurve(to: CGPoint(x: -20.05, y: -0.5), controlPoint1: CGPoint(x: -12.07, y: 17.28), controlPoint2: CGPoint(x: -20.05, y: 9.3))
        bezierPath.addCurve(to: CGPoint(x: -2.27, y: -18.27), controlPoint1: CGPoint(x: -20.05, y: -10.3), controlPoint2: CGPoint(x: -12.07, y: -18.27))
        bezierPath.addCurve(to: CGPoint(x: 15.04, y: -4.45), controlPoint1: CGPoint(x: 6.17, y: -18.27), controlPoint2: CGPoint(x: 13.24, y: -12.35))
        bezierPath.addLine(to: CGPoint(x: 12.14, y: -4.45))
        bezierPath.addCurve(to: CGPoint(x: 11.24, y: -3.88), controlPoint1: CGPoint(x: 11.75, y: -4.45), controlPoint2: CGPoint(x: 11.41, y: -4.23))
        bezierPath.addCurve(to: CGPoint(x: 11.38, y: -2.83), controlPoint1: CGPoint(x: 11.08, y: -3.53), controlPoint2: CGPoint(x: 11.13, y: -3.12))
        bezierPath.addLine(to: CGPoint(x: 16.32, y: 3.1))
        bezierPath.addCurve(to: CGPoint(x: 17.08, y: 3.45), controlPoint1: CGPoint(x: 16.51, y: 3.32), controlPoint2: CGPoint(x: 16.78, y: 3.45))
        bezierPath.addCurve(to: CGPoint(x: 17.83, y: 3.1), controlPoint1: CGPoint(x: 17.37, y: 3.45), controlPoint2: CGPoint(x: 17.65, y: 3.32))
        bezierPath.addLine(to: CGPoint(x: 22.77, y: -2.83))
        bezierPath.addCurve(to: CGPoint(x: 22.91, y: -3.88), controlPoint1: CGPoint(x: 23.02, y: -3.12), controlPoint2: CGPoint(x: 23.07, y: -3.53))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -2.27, y: -17.29))
        bezier2Path.addCurve(to: CGPoint(x: -4.25, y: -15.31), controlPoint1: CGPoint(x: -3.36, y: -17.29), controlPoint2: CGPoint(x: -4.25, y: -16.4))
        bezier2Path.addLine(to: CGPoint(x: -4.25, y: -3.33))
        bezier2Path.addCurve(to: CGPoint(x: -5.73, y: -0.5), controlPoint1: CGPoint(x: -5.14, y: -2.7), controlPoint2: CGPoint(x: -5.73, y: -1.67))
        bezier2Path.addCurve(to: CGPoint(x: -2.27, y: 2.96), controlPoint1: CGPoint(x: -5.73, y: 1.41), controlPoint2: CGPoint(x: -4.18, y: 2.96))
        bezier2Path.addCurve(to: CGPoint(x: -0.81, y: 2.63), controlPoint1: CGPoint(x: -1.75, y: 2.96), controlPoint2: CGPoint(x: -1.26, y: 2.83))
        bezier2Path.addLine(to: CGPoint(x: 6.06, y: 6.59))
        bezier2Path.addCurve(to: CGPoint(x: 7.04, y: 6.86), controlPoint1: CGPoint(x: 6.37, y: 6.77), controlPoint2: CGPoint(x: 6.71, y: 6.86))
        bezier2Path.addCurve(to: CGPoint(x: 8.75, y: 5.87), controlPoint1: CGPoint(x: 7.72, y: 6.86), controlPoint2: CGPoint(x: 8.39, y: 6.5))
        bezier2Path.addCurve(to: CGPoint(x: 8.03, y: 3.17), controlPoint1: CGPoint(x: 9.3, y: 4.93), controlPoint2: CGPoint(x: 8.98, y: 3.72))
        bezier2Path.addLine(to: CGPoint(x: 1.15, y: -0.8))
        bezier2Path.addCurve(to: CGPoint(x: -0.3, y: -3.33), controlPoint1: CGPoint(x: 1.06, y: -1.84), controlPoint2: CGPoint(x: 0.52, y: -2.76))
        bezier2Path.addLine(to: CGPoint(x: -0.3, y: -15.31))
        bezier2Path.addCurve(to: CGPoint(x: -2.27, y: -17.29), controlPoint1: CGPoint(x: -0.3, y: -16.4), controlPoint2: CGPoint(x: -1.18, y: -17.29))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: -2.27, y: 0.98))
        bezier2Path.addCurve(to: CGPoint(x: -3.75, y: -0.5), controlPoint1: CGPoint(x: -3.09, y: 0.98), controlPoint2: CGPoint(x: -3.75, y: 0.32))
        bezier2Path.addCurve(to: CGPoint(x: -2.27, y: -1.98), controlPoint1: CGPoint(x: -3.75, y: -1.31), controlPoint2: CGPoint(x: -3.09, y: -1.98))
        bezier2Path.addCurve(to: CGPoint(x: -0.79, y: -0.5), controlPoint1: CGPoint(x: -1.46, y: -1.98), controlPoint2: CGPoint(x: -0.79, y: -1.31))
        bezier2Path.addCurve(to: CGPoint(x: -2.27, y: 0.98), controlPoint1: CGPoint(x: -0.79, y: 0.32), controlPoint2: CGPoint(x: -1.46, y: 0.98))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCalendarCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 512, height: 512), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 512, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 512, y: resizedFrame.height / 512)


        //// Group 31
        context.saveGState()
        context.translateBy(x: 256, y: 256)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Group
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 196, y: -216))
        bezierPath.addLine(to: CGPoint(x: 172, y: -216))
        bezierPath.addLine(to: CGPoint(x: 172, y: -256))
        bezierPath.addLine(to: CGPoint(x: 132, y: -256))
        bezierPath.addLine(to: CGPoint(x: 132, y: -216))
        bezierPath.addLine(to: CGPoint(x: -132, y: -216))
        bezierPath.addLine(to: CGPoint(x: -132, y: -256))
        bezierPath.addLine(to: CGPoint(x: -172, y: -256))
        bezierPath.addLine(to: CGPoint(x: -172, y: -216))
        bezierPath.addLine(to: CGPoint(x: -196, y: -216))
        bezierPath.addCurve(to: CGPoint(x: -256, y: -156), controlPoint1: CGPoint(x: -229.08, y: -216), controlPoint2: CGPoint(x: -256, y: -189.08))
        bezierPath.addLine(to: CGPoint(x: -256, y: 196))
        bezierPath.addCurve(to: CGPoint(x: -196, y: 256), controlPoint1: CGPoint(x: -256, y: 229.08), controlPoint2: CGPoint(x: -229.08, y: 256))
        bezierPath.addLine(to: CGPoint(x: 196, y: 256))
        bezierPath.addCurve(to: CGPoint(x: 256, y: 196), controlPoint1: CGPoint(x: 229.08, y: 256), controlPoint2: CGPoint(x: 256, y: 229.08))
        bezierPath.addLine(to: CGPoint(x: 256, y: -156))
        bezierPath.addCurve(to: CGPoint(x: 196, y: -216), controlPoint1: CGPoint(x: 256, y: -189.08), controlPoint2: CGPoint(x: 229.08, y: -216))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 216, y: 196))
        bezierPath.addCurve(to: CGPoint(x: 196, y: 216), controlPoint1: CGPoint(x: 216, y: 207.03), controlPoint2: CGPoint(x: 207.03, y: 216))
        bezierPath.addLine(to: CGPoint(x: -196, y: 216))
        bezierPath.addCurve(to: CGPoint(x: -216, y: 196), controlPoint1: CGPoint(x: -207.03, y: 216), controlPoint2: CGPoint(x: -216, y: 207.03))
        bezierPath.addLine(to: CGPoint(x: -216, y: -68))
        bezierPath.addLine(to: CGPoint(x: 216, y: -68))
        bezierPath.addLine(to: CGPoint(x: 216, y: 196))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 216, y: -108))
        bezierPath.addLine(to: CGPoint(x: -216, y: -108))
        bezierPath.addLine(to: CGPoint(x: -216, y: -156))
        bezierPath.addCurve(to: CGPoint(x: -196, y: -176), controlPoint1: CGPoint(x: -216, y: -167.03), controlPoint2: CGPoint(x: -207.03, y: -176))
        bezierPath.addLine(to: CGPoint(x: -172, y: -176))
        bezierPath.addLine(to: CGPoint(x: -172, y: -136))
        bezierPath.addLine(to: CGPoint(x: -132, y: -136))
        bezierPath.addLine(to: CGPoint(x: -132, y: -176))
        bezierPath.addLine(to: CGPoint(x: 132, y: -176))
        bezierPath.addLine(to: CGPoint(x: 132, y: -136))
        bezierPath.addLine(to: CGPoint(x: 172, y: -136))
        bezierPath.addLine(to: CGPoint(x: 172, y: -176))
        bezierPath.addLine(to: CGPoint(x: 196, y: -176))
        bezierPath.addCurve(to: CGPoint(x: 216, y: -156), controlPoint1: CGPoint(x: 207.03, y: -176), controlPoint2: CGPoint(x: 216, y: -167.03))
        bezierPath.addLine(to: CGPoint(x: 216, y: -108))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()






        //// Group 3
        //// Group 4
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -180, y: -26, width: 40, height: 40))
        theme.setFill()
        rectanglePath.fill()






        //// Group 5
        //// Group 6
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: -100, y: -26, width: 40, height: 40))
        theme.setFill()
        rectangle2Path.fill()






        //// Group 7
        //// Group 8
        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: -20, y: -26, width: 40, height: 40))
        theme.setFill()
        rectangle3Path.fill()






        //// Group 9
        //// Group 10
        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 60, y: -26, width: 40, height: 40))
        theme.setFill()
        rectangle4Path.fill()






        //// Group 11
        //// Group 12
        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 140, y: -26, width: 40, height: 40))
        theme.setFill()
        rectangle5Path.fill()






        //// Group 13
        //// Group 14
        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: -180, y: 54, width: 40, height: 40))
        theme.setFill()
        rectangle6Path.fill()






        //// Group 15
        //// Group 16
        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: -100, y: 54, width: 40, height: 40))
        theme.setFill()
        rectangle7Path.fill()






        //// Group 17
        //// Group 18
        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: -20, y: 54, width: 40, height: 40))
        theme.setFill()
        rectangle8Path.fill()






        //// Group 19
        //// Group 20
        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 60, y: 54, width: 40, height: 40))
        theme.setFill()
        rectangle9Path.fill()






        //// Group 21
        //// Group 22
        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: -180, y: 134, width: 40, height: 40))
        theme.setFill()
        rectangle10Path.fill()






        //// Group 23
        //// Group 24
        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: -100, y: 134, width: 40, height: 40))
        theme.setFill()
        rectangle11Path.fill()






        //// Group 25
        //// Group 26
        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRect(x: -20, y: 134, width: 40, height: 40))
        theme.setFill()
        rectangle12Path.fill()






        //// Group 27
        //// Group 28
        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(rect: CGRect(x: 60, y: 134, width: 40, height: 40))
        theme.setFill()
        rectangle13Path.fill()






        //// Group 29
        //// Group 30
        //// Rectangle 14 Drawing
        let rectangle14Path = UIBezierPath(rect: CGRect(x: 140, y: 54, width: 40, height: 40))
        theme.setFill()
        rectangle14Path.fill()







        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLogoutCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 330, height: 330), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 330, height: 330), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 330, y: resizedFrame.height / 330)


        //// XMLID_2_
        context.saveGState()
        context.translateBy(x: 165, y: 165)
        context.scaleBy(x: 0.8, y: 0.8)



        //// XMLID_4_ Drawing
        let xMLID_4_Path = UIBezierPath()
        xMLID_4_Path.move(to: CGPoint(x: -113.79, y: 15))
        xMLID_4_Path.addLine(to: CGPoint(x: 60, y: 15))
        xMLID_4_Path.addCurve(to: CGPoint(x: 75, y: 0), controlPoint1: CGPoint(x: 68.28, y: 15), controlPoint2: CGPoint(x: 75, y: 8.28))
        xMLID_4_Path.addCurve(to: CGPoint(x: 60, y: -15), controlPoint1: CGPoint(x: 75, y: -8.28), controlPoint2: CGPoint(x: 68.28, y: -15))
        xMLID_4_Path.addLine(to: CGPoint(x: -113.79, y: -15))
        xMLID_4_Path.addLine(to: CGPoint(x: -94.39, y: -34.39))
        xMLID_4_Path.addCurve(to: CGPoint(x: -94.39, y: -55.61), controlPoint1: CGPoint(x: -88.53, y: -40.25), controlPoint2: CGPoint(x: -88.53, y: -49.75))
        xMLID_4_Path.addCurve(to: CGPoint(x: -115.61, y: -55.61), controlPoint1: CGPoint(x: -100.25, y: -61.46), controlPoint2: CGPoint(x: -109.75, y: -61.46))
        xMLID_4_Path.addLine(to: CGPoint(x: -160.6, y: -10.61))
        xMLID_4_Path.addCurve(to: CGPoint(x: -161.59, y: -9.52), controlPoint1: CGPoint(x: -160.95, y: -10.26), controlPoint2: CGPoint(x: -161.28, y: -9.9))
        xMLID_4_Path.addCurve(to: CGPoint(x: -161.81, y: -9.23), controlPoint1: CGPoint(x: -161.67, y: -9.43), controlPoint2: CGPoint(x: -161.73, y: -9.33))
        xMLID_4_Path.addCurve(to: CGPoint(x: -162.47, y: -8.34), controlPoint1: CGPoint(x: -162.03, y: -8.94), controlPoint2: CGPoint(x: -162.26, y: -8.65))
        xMLID_4_Path.addCurve(to: CGPoint(x: -162.63, y: -8.06), controlPoint1: CGPoint(x: -162.53, y: -8.25), controlPoint2: CGPoint(x: -162.57, y: -8.16))
        xMLID_4_Path.addCurve(to: CGPoint(x: -163.22, y: -7.08), controlPoint1: CGPoint(x: -162.84, y: -7.74), controlPoint2: CGPoint(x: -163.04, y: -7.42))
        xMLID_4_Path.addCurve(to: CGPoint(x: -163.32, y: -6.87), controlPoint1: CGPoint(x: -163.26, y: -7.01), controlPoint2: CGPoint(x: -163.29, y: -6.94))
        xMLID_4_Path.addCurve(to: CGPoint(x: -163.85, y: -5.75), controlPoint1: CGPoint(x: -163.51, y: -6.51), controlPoint2: CGPoint(x: -163.69, y: -6.13))
        xMLID_4_Path.addCurve(to: CGPoint(x: -163.91, y: -5.6), controlPoint1: CGPoint(x: -163.87, y: -5.7), controlPoint2: CGPoint(x: -163.89, y: -5.65))
        xMLID_4_Path.addCurve(to: CGPoint(x: -164.35, y: -4.37), controlPoint1: CGPoint(x: -164.07, y: -5.2), controlPoint2: CGPoint(x: -164.22, y: -4.79))
        xMLID_4_Path.addCurve(to: CGPoint(x: -164.39, y: -4.21), controlPoint1: CGPoint(x: -164.37, y: -4.32), controlPoint2: CGPoint(x: -164.37, y: -4.26))
        xMLID_4_Path.addCurve(to: CGPoint(x: -164.71, y: -2.95), controlPoint1: CGPoint(x: -164.51, y: -3.8), controlPoint2: CGPoint(x: -164.62, y: -3.38))
        xMLID_4_Path.addCurve(to: CGPoint(x: -164.76, y: -2.57), controlPoint1: CGPoint(x: -164.73, y: -2.82), controlPoint2: CGPoint(x: -164.74, y: -2.69))
        xMLID_4_Path.addCurve(to: CGPoint(x: -164.92, y: -1.5), controlPoint1: CGPoint(x: -164.83, y: -2.21), controlPoint2: CGPoint(x: -164.89, y: -1.86))
        xMLID_4_Path.addCurve(to: CGPoint(x: -165, y: 0), controlPoint1: CGPoint(x: -164.97, y: -1), controlPoint2: CGPoint(x: -165, y: -0.5))
        xMLID_4_Path.addCurve(to: CGPoint(x: -164.92, y: 1.5), controlPoint1: CGPoint(x: -165, y: 0.5), controlPoint2: CGPoint(x: -164.97, y: 1))
        xMLID_4_Path.addCurve(to: CGPoint(x: -164.76, y: 2.58), controlPoint1: CGPoint(x: -164.89, y: 1.86), controlPoint2: CGPoint(x: -164.82, y: 2.22))
        xMLID_4_Path.addCurve(to: CGPoint(x: -164.71, y: 2.95), controlPoint1: CGPoint(x: -164.74, y: 2.7), controlPoint2: CGPoint(x: -164.73, y: 2.83))
        xMLID_4_Path.addCurve(to: CGPoint(x: -164.39, y: 4.22), controlPoint1: CGPoint(x: -164.62, y: 3.38), controlPoint2: CGPoint(x: -164.51, y: 3.8))
        xMLID_4_Path.addCurve(to: CGPoint(x: -164.35, y: 4.37), controlPoint1: CGPoint(x: -164.37, y: 4.27), controlPoint2: CGPoint(x: -164.36, y: 4.32))
        xMLID_4_Path.addCurve(to: CGPoint(x: -163.9, y: 5.62), controlPoint1: CGPoint(x: -164.22, y: 4.79), controlPoint2: CGPoint(x: -164.07, y: 5.21))
        xMLID_4_Path.addCurve(to: CGPoint(x: -163.85, y: 5.75), controlPoint1: CGPoint(x: -163.89, y: 5.66), controlPoint2: CGPoint(x: -163.87, y: 5.71))
        xMLID_4_Path.addCurve(to: CGPoint(x: -163.32, y: 6.88), controlPoint1: CGPoint(x: -163.69, y: 6.14), controlPoint2: CGPoint(x: -163.51, y: 6.51))
        xMLID_4_Path.addCurve(to: CGPoint(x: -163.22, y: 7.08), controlPoint1: CGPoint(x: -163.29, y: 6.94), controlPoint2: CGPoint(x: -163.26, y: 7.01))
        xMLID_4_Path.addCurve(to: CGPoint(x: -162.63, y: 8.07), controlPoint1: CGPoint(x: -163.04, y: 7.42), controlPoint2: CGPoint(x: -162.84, y: 7.75))
        xMLID_4_Path.addCurve(to: CGPoint(x: -162.47, y: 8.34), controlPoint1: CGPoint(x: -162.57, y: 8.16), controlPoint2: CGPoint(x: -162.53, y: 8.25))
        xMLID_4_Path.addCurve(to: CGPoint(x: -161.81, y: 9.23), controlPoint1: CGPoint(x: -162.26, y: 8.65), controlPoint2: CGPoint(x: -162.03, y: 8.94))
        xMLID_4_Path.addCurve(to: CGPoint(x: -161.59, y: 9.52), controlPoint1: CGPoint(x: -161.73, y: 9.33), controlPoint2: CGPoint(x: -161.67, y: 9.43))
        xMLID_4_Path.addCurve(to: CGPoint(x: -160.6, y: 10.61), controlPoint1: CGPoint(x: -161.28, y: 9.9), controlPoint2: CGPoint(x: -160.95, y: 10.26))
        xMLID_4_Path.addLine(to: CGPoint(x: -115.61, y: 55.61))
        xMLID_4_Path.addCurve(to: CGPoint(x: -105, y: 60), controlPoint1: CGPoint(x: -112.68, y: 58.54), controlPoint2: CGPoint(x: -108.84, y: 60))
        xMLID_4_Path.addCurve(to: CGPoint(x: -94.39, y: 55.61), controlPoint1: CGPoint(x: -101.16, y: 60), controlPoint2: CGPoint(x: -97.32, y: 58.54))
        xMLID_4_Path.addCurve(to: CGPoint(x: -94.39, y: 34.39), controlPoint1: CGPoint(x: -88.54, y: 49.75), controlPoint2: CGPoint(x: -88.54, y: 40.25))
        xMLID_4_Path.addLine(to: CGPoint(x: -113.79, y: 15))
        xMLID_4_Path.close()
        theme.setFill()
        xMLID_4_Path.fill()


        //// XMLID_5_ Drawing
        let xMLID_5_Path = UIBezierPath()
        xMLID_5_Path.move(to: CGPoint(x: 42.3, y: -122.7))
        xMLID_5_Path.addCurve(to: CGPoint(x: -59.6, y: -68.37), controlPoint1: CGPoint(x: 1.36, y: -122.7), controlPoint2: CGPoint(x: -36.74, y: -102.39))
        xMLID_5_Path.addCurve(to: CGPoint(x: -55.52, y: -47.55), controlPoint1: CGPoint(x: -64.22, y: -61.49), controlPoint2: CGPoint(x: -62.4, y: -52.17))
        xMLID_5_Path.addCurve(to: CGPoint(x: -34.7, y: -51.63), controlPoint1: CGPoint(x: -48.65, y: -42.93), controlPoint2: CGPoint(x: -39.33, y: -44.76))
        xMLID_5_Path.addCurve(to: CGPoint(x: 42.3, y: -92.7), controlPoint1: CGPoint(x: -17.42, y: -77.35), controlPoint2: CGPoint(x: 11.36, y: -92.7))
        xMLID_5_Path.addCurve(to: CGPoint(x: 135, y: 0), controlPoint1: CGPoint(x: 93.41, y: -92.7), controlPoint2: CGPoint(x: 135, y: -51.12))
        xMLID_5_Path.addCurve(to: CGPoint(x: 42.3, y: 92.7), controlPoint1: CGPoint(x: 135, y: 51.12), controlPoint2: CGPoint(x: 93.41, y: 92.7))
        xMLID_5_Path.addCurve(to: CGPoint(x: -34.58, y: 51.82), controlPoint1: CGPoint(x: 11.45, y: 92.7), controlPoint2: CGPoint(x: -17.29, y: 77.42))
        xMLID_5_Path.addCurve(to: CGPoint(x: -55.41, y: 47.79), controlPoint1: CGPoint(x: -39.22, y: 44.96), controlPoint2: CGPoint(x: -48.54, y: 43.15))
        xMLID_5_Path.addCurve(to: CGPoint(x: -59.44, y: 68.61), controlPoint1: CGPoint(x: -62.27, y: 52.43), controlPoint2: CGPoint(x: -64.08, y: 61.75))
        xMLID_5_Path.addCurve(to: CGPoint(x: 42.3, y: 122.7), controlPoint1: CGPoint(x: -36.56, y: 102.48), controlPoint2: CGPoint(x: 1.47, y: 122.7))
        xMLID_5_Path.addCurve(to: CGPoint(x: 165, y: 0), controlPoint1: CGPoint(x: 109.96, y: 122.7), controlPoint2: CGPoint(x: 165, y: 67.66))
        xMLID_5_Path.addCurve(to: CGPoint(x: 42.3, y: -122.7), controlPoint1: CGPoint(x: 165, y: -67.66), controlPoint2: CGPoint(x: 109.96, y: -122.7))
        xMLID_5_Path.close()
        theme.setFill()
        xMLID_5_Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMenuCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 124, height: 124), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 124, height: 124), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 124, y: resizedFrame.height / 124)


        //// Group
        context.saveGState()
        context.translateBy(x: 62, y: 62)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 50, y: -56))
        bezierPath.addLine(to: CGPoint(x: -50, y: -56))
        bezierPath.addCurve(to: CGPoint(x: -62, y: -44), controlPoint1: CGPoint(x: -56.6, y: -56), controlPoint2: CGPoint(x: -62, y: -50.6))
        bezierPath.addCurve(to: CGPoint(x: -50, y: -32), controlPoint1: CGPoint(x: -62, y: -37.4), controlPoint2: CGPoint(x: -56.6, y: -32))
        bezierPath.addLine(to: CGPoint(x: 50, y: -32))
        bezierPath.addCurve(to: CGPoint(x: 62, y: -44), controlPoint1: CGPoint(x: 56.6, y: -32), controlPoint2: CGPoint(x: 62, y: -37.4))
        bezierPath.addCurve(to: CGPoint(x: 50, y: -56), controlPoint1: CGPoint(x: 62, y: -50.6), controlPoint2: CGPoint(x: 56.6, y: -56))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 50, y: -12))
        bezier2Path.addLine(to: CGPoint(x: -50, y: -12))
        bezier2Path.addCurve(to: CGPoint(x: -62, y: 0), controlPoint1: CGPoint(x: -56.6, y: -12), controlPoint2: CGPoint(x: -62, y: -6.6))
        bezier2Path.addCurve(to: CGPoint(x: -50, y: 12), controlPoint1: CGPoint(x: -62, y: 6.6), controlPoint2: CGPoint(x: -56.6, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 50, y: 12))
        bezier2Path.addCurve(to: CGPoint(x: 62, y: 0), controlPoint1: CGPoint(x: 56.6, y: 12), controlPoint2: CGPoint(x: 62, y: 6.6))
        bezier2Path.addCurve(to: CGPoint(x: 50, y: -12), controlPoint1: CGPoint(x: 62, y: -6.6), controlPoint2: CGPoint(x: 56.6, y: -12))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 50, y: 32))
        bezier3Path.addLine(to: CGPoint(x: -50, y: 32))
        bezier3Path.addCurve(to: CGPoint(x: -62, y: 44), controlPoint1: CGPoint(x: -56.6, y: 32), controlPoint2: CGPoint(x: -62, y: 37.4))
        bezier3Path.addCurve(to: CGPoint(x: -50, y: 56), controlPoint1: CGPoint(x: -62, y: 50.6), controlPoint2: CGPoint(x: -56.6, y: 56))
        bezier3Path.addLine(to: CGPoint(x: 50, y: 56))
        bezier3Path.addCurve(to: CGPoint(x: 62, y: 44), controlPoint1: CGPoint(x: 56.6, y: 56), controlPoint2: CGPoint(x: 62, y: 50.6))
        bezier3Path.addCurve(to: CGPoint(x: 50, y: 32), controlPoint1: CGPoint(x: 62, y: 37.4), controlPoint2: CGPoint(x: 56.6, y: 32))
        bezier3Path.close()
        theme.setFill()
        bezier3Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPlaybuttonCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Group
        context.saveGState()
        context.translateBy(x: 30, y: 30)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 15.56, y: -0.83))
        bezierPath.addLine(to: CGPoint(x: -6.44, y: -15.83))
        bezierPath.addCurve(to: CGPoint(x: -7.47, y: -15.88), controlPoint1: CGPoint(x: -6.74, y: -16.03), controlPoint2: CGPoint(x: -7.14, y: -16.06))
        bezierPath.addCurve(to: CGPoint(x: -8, y: -15), controlPoint1: CGPoint(x: -7.8, y: -15.71), controlPoint2: CGPoint(x: -8, y: -15.37))
        bezierPath.addLine(to: CGPoint(x: -8, y: 15))
        bezierPath.addCurve(to: CGPoint(x: -7.47, y: 15.88), controlPoint1: CGPoint(x: -8, y: 15.37), controlPoint2: CGPoint(x: -7.8, y: 15.71))
        bezierPath.addCurve(to: CGPoint(x: -7, y: 16), controlPoint1: CGPoint(x: -7.32, y: 15.96), controlPoint2: CGPoint(x: -7.16, y: 16))
        bezierPath.addCurve(to: CGPoint(x: -6.44, y: 15.83), controlPoint1: CGPoint(x: -6.8, y: 16), controlPoint2: CGPoint(x: -6.61, y: 15.94))
        bezierPath.addLine(to: CGPoint(x: 15.56, y: 0.83))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 15.84, y: 0.64), controlPoint2: CGPoint(x: 16, y: 0.33))
        bezierPath.addCurve(to: CGPoint(x: 15.56, y: -0.83), controlPoint1: CGPoint(x: 16, y: -0.33), controlPoint2: CGPoint(x: 15.84, y: -0.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: -6, y: 13.11))
        bezierPath.addLine(to: CGPoint(x: -6, y: -13.11))
        bezierPath.addLine(to: CGPoint(x: 13.23, y: 0))
        bezierPath.addLine(to: CGPoint(x: -6, y: 13.11))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: -30))
        bezier2Path.addCurve(to: CGPoint(x: -30, y: 0), controlPoint1: CGPoint(x: -16.54, y: -30), controlPoint2: CGPoint(x: -30, y: -16.54))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 30), controlPoint1: CGPoint(x: -30, y: 16.54), controlPoint2: CGPoint(x: -16.54, y: 30))
        bezier2Path.addCurve(to: CGPoint(x: 30, y: 0), controlPoint1: CGPoint(x: 16.54, y: 30), controlPoint2: CGPoint(x: 30, y: 16.54))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -30), controlPoint1: CGPoint(x: 30, y: -16.54), controlPoint2: CGPoint(x: 16.54, y: -30))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 0, y: 28))
        bezier2Path.addCurve(to: CGPoint(x: -28, y: 0), controlPoint1: CGPoint(x: -15.44, y: 28), controlPoint2: CGPoint(x: -28, y: 15.44))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -28), controlPoint1: CGPoint(x: -28, y: -15.44), controlPoint2: CGPoint(x: -15.44, y: -28))
        bezier2Path.addCurve(to: CGPoint(x: 28, y: 0), controlPoint1: CGPoint(x: 15.44, y: -28), controlPoint2: CGPoint(x: 28, y: -15.44))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 28), controlPoint1: CGPoint(x: 28, y: 15.44), controlPoint2: CGPoint(x: 15.44, y: 28))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRadioonbuttonCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 510, height: 510), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 510, height: 510), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 510, y: resizedFrame.height / 510)


        //// radio-button-on
        context.saveGState()
        context.translateBy(x: 255, y: 255)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: -127.5))
        bezierPath.addCurve(to: CGPoint(x: -127.5, y: 0), controlPoint1: CGPoint(x: -71.4, y: -127.5), controlPoint2: CGPoint(x: -127.5, y: -71.4))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 127.5), controlPoint1: CGPoint(x: -127.5, y: 71.4), controlPoint2: CGPoint(x: -71.4, y: 127.5))
        bezierPath.addCurve(to: CGPoint(x: 127.5, y: 0), controlPoint1: CGPoint(x: 71.4, y: 127.5), controlPoint2: CGPoint(x: 127.5, y: 71.4))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -127.5), controlPoint1: CGPoint(x: 127.5, y: -71.4), controlPoint2: CGPoint(x: 71.4, y: -127.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: -255))
        bezierPath.addCurve(to: CGPoint(x: -255, y: 0), controlPoint1: CGPoint(x: -140.25, y: -255), controlPoint2: CGPoint(x: -255, y: -140.25))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 255), controlPoint1: CGPoint(x: -255, y: 140.25), controlPoint2: CGPoint(x: -140.25, y: 255))
        bezierPath.addCurve(to: CGPoint(x: 255, y: 0), controlPoint1: CGPoint(x: 140.25, y: 255), controlPoint2: CGPoint(x: 255, y: 140.25))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -255), controlPoint1: CGPoint(x: 255, y: -140.25), controlPoint2: CGPoint(x: 140.25, y: -255))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 204))
        bezierPath.addCurve(to: CGPoint(x: -204, y: 0), controlPoint1: CGPoint(x: -112.2, y: 204), controlPoint2: CGPoint(x: -204, y: 112.2))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -204), controlPoint1: CGPoint(x: -204, y: -112.2), controlPoint2: CGPoint(x: -112.2, y: -204))
        bezierPath.addCurve(to: CGPoint(x: 204, y: 0), controlPoint1: CGPoint(x: 112.2, y: -204), controlPoint2: CGPoint(x: 204, y: -112.2))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 204), controlPoint1: CGPoint(x: 204, y: 112.2), controlPoint2: CGPoint(x: 112.2, y: 204))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRadiooffbuttonCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 510, height: 510), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 510, height: 510), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 510, y: resizedFrame.height / 510)


        //// radio-button-on
        context.saveGState()
        context.translateBy(x: 255, y: 255)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -0, y: -204))
        bezierPath.addCurve(to: CGPoint(x: -204, y: 0), controlPoint1: CGPoint(x: -112.2, y: -204), controlPoint2: CGPoint(x: -204, y: -112.2))
        bezierPath.addCurve(to: CGPoint(x: -0, y: 204), controlPoint1: CGPoint(x: -204, y: 112.2), controlPoint2: CGPoint(x: -112.2, y: 204))
        bezierPath.addCurve(to: CGPoint(x: 204, y: 0), controlPoint1: CGPoint(x: 112.2, y: 204), controlPoint2: CGPoint(x: 204, y: 112.2))
        bezierPath.addCurve(to: CGPoint(x: -0, y: -204), controlPoint1: CGPoint(x: 204, y: -112.2), controlPoint2: CGPoint(x: 112.2, y: -204))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 255, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 255), controlPoint1: CGPoint(x: 255, y: 140.25), controlPoint2: CGPoint(x: 140.25, y: 255))
        bezierPath.addCurve(to: CGPoint(x: -255, y: 0), controlPoint1: CGPoint(x: -140.25, y: 255), controlPoint2: CGPoint(x: -255, y: 140.25))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -255), controlPoint1: CGPoint(x: -255, y: -140.25), controlPoint2: CGPoint(x: -140.25, y: -255))
        bezierPath.addCurve(to: CGPoint(x: 255, y: 0), controlPoint1: CGPoint(x: 140.25, y: -255), controlPoint2: CGPoint(x: 255, y: -140.25))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPlusCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 52, height: 52), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 52, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 52, y: resizedFrame.height / 52)


        //// Group
        context.saveGState()
        context.translateBy(x: 26, y: 26)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: -26))
        bezierPath.addCurve(to: CGPoint(x: -26, y: 0), controlPoint1: CGPoint(x: -14.34, y: -26), controlPoint2: CGPoint(x: -26, y: -14.34))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 26), controlPoint1: CGPoint(x: -26, y: 14.34), controlPoint2: CGPoint(x: -14.34, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 0), controlPoint1: CGPoint(x: 14.34, y: 26), controlPoint2: CGPoint(x: 26, y: 14.34))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -26), controlPoint1: CGPoint(x: 26, y: -14.34), controlPoint2: CGPoint(x: 14.34, y: -26))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 24))
        bezierPath.addCurve(to: CGPoint(x: -24, y: 0), controlPoint1: CGPoint(x: -13.23, y: 24), controlPoint2: CGPoint(x: -24, y: 13.23))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -24), controlPoint1: CGPoint(x: -24, y: -13.23), controlPoint2: CGPoint(x: -13.23, y: -24))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 0), controlPoint1: CGPoint(x: 13.23, y: -24), controlPoint2: CGPoint(x: 24, y: -13.23))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 24), controlPoint1: CGPoint(x: 24, y: 13.23), controlPoint2: CGPoint(x: 13.23, y: 24))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 12.5, y: -1))
        bezier2Path.addLine(to: CGPoint(x: 1, y: -1))
        bezier2Path.addLine(to: CGPoint(x: 1, y: -12))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -13), controlPoint1: CGPoint(x: 1, y: -12.55), controlPoint2: CGPoint(x: 0.55, y: -13))
        bezier2Path.addCurve(to: CGPoint(x: -1, y: -12), controlPoint1: CGPoint(x: -0.55, y: -13), controlPoint2: CGPoint(x: -1, y: -12.55))
        bezier2Path.addLine(to: CGPoint(x: -1, y: -1))
        bezier2Path.addLine(to: CGPoint(x: -12.5, y: -1))
        bezier2Path.addCurve(to: CGPoint(x: -13.5, y: 0), controlPoint1: CGPoint(x: -13.05, y: -1), controlPoint2: CGPoint(x: -13.5, y: -0.55))
        bezier2Path.addCurve(to: CGPoint(x: -12.5, y: 1), controlPoint1: CGPoint(x: -13.5, y: 0.55), controlPoint2: CGPoint(x: -13.05, y: 1))
        bezier2Path.addLine(to: CGPoint(x: -1, y: 1))
        bezier2Path.addLine(to: CGPoint(x: -1, y: 13))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: -1, y: 13.55), controlPoint2: CGPoint(x: -0.55, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 1, y: 13), controlPoint1: CGPoint(x: 0.55, y: 14), controlPoint2: CGPoint(x: 1, y: 13.55))
        bezier2Path.addLine(to: CGPoint(x: 1, y: 1))
        bezier2Path.addLine(to: CGPoint(x: 12.5, y: 1))
        bezier2Path.addCurve(to: CGPoint(x: 13.5, y: 0), controlPoint1: CGPoint(x: 13.05, y: 1), controlPoint2: CGPoint(x: 13.5, y: 0.55))
        bezier2Path.addCurve(to: CGPoint(x: 12.5, y: -1), controlPoint1: CGPoint(x: 13.5, y: -0.55), controlPoint2: CGPoint(x: 13.05, y: -1))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMinusCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 52, height: 52), resizing: ResizingBehavior = .aspectFit, theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 52, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 52, y: resizedFrame.height / 52)


        //// Group
        context.saveGState()
        context.translateBy(x: 26, y: 26)
        context.scaleBy(x: 0.8, y: 0.8)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: -26))
        bezierPath.addCurve(to: CGPoint(x: -26, y: 0), controlPoint1: CGPoint(x: -14.34, y: -26), controlPoint2: CGPoint(x: -26, y: -14.34))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 26), controlPoint1: CGPoint(x: -26, y: 14.34), controlPoint2: CGPoint(x: -14.34, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 0), controlPoint1: CGPoint(x: 14.34, y: 26), controlPoint2: CGPoint(x: 26, y: 14.34))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -26), controlPoint1: CGPoint(x: 26, y: -14.34), controlPoint2: CGPoint(x: 14.34, y: -26))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 24))
        bezierPath.addCurve(to: CGPoint(x: -24, y: 0), controlPoint1: CGPoint(x: -13.23, y: 24), controlPoint2: CGPoint(x: -24, y: 13.23))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -24), controlPoint1: CGPoint(x: -24, y: -13.23), controlPoint2: CGPoint(x: -13.23, y: -24))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 0), controlPoint1: CGPoint(x: 13.23, y: -24), controlPoint2: CGPoint(x: 24, y: -13.23))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 24), controlPoint1: CGPoint(x: 24, y: 13.23), controlPoint2: CGPoint(x: 13.23, y: 24))
        bezierPath.close()
        theme.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 13, y: -1))
        bezier2Path.addLine(to: CGPoint(x: -13, y: -1))
        bezier2Path.addCurve(to: CGPoint(x: -14, y: 0), controlPoint1: CGPoint(x: -13.55, y: -1), controlPoint2: CGPoint(x: -14, y: -0.55))
        bezier2Path.addCurve(to: CGPoint(x: -13, y: 1), controlPoint1: CGPoint(x: -14, y: 0.55), controlPoint2: CGPoint(x: -13.55, y: 1))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 1))
        bezier2Path.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 13.55, y: 1), controlPoint2: CGPoint(x: 14, y: 0.55))
        bezier2Path.addCurve(to: CGPoint(x: 13, y: -1), controlPoint1: CGPoint(x: 14, y: -0.55), controlPoint2: CGPoint(x: 13.55, y: -1))
        bezier2Path.close()
        theme.setFill()
        bezier2Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfBacK(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 225, height: 225), false, 0)
        let context = UIGraphicsGetCurrentContext()!
        context.translateBy(x: 0, y: 2)
            THButtons.drawBacK(theme: theme)

        let imageOfBacK = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfBacK
    }

    @objc dynamic public class func imageOfFront(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 225, height: 225), false, 0)
        let context = UIGraphicsGetCurrentContext()!
        context.translateBy(x: 0, y: 2)
            THButtons.drawFront(theme: theme)

        let imageOfFront = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfFront
    }

    @objc dynamic public class func imageOfPhone(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 226, height: 226), false, 0)
            THButtons.drawPhone(theme: theme)

        let imageOfPhone = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPhone
    }

    @objc dynamic public class func imageOfPencileditbuttonCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 529, height: 529), false, 0)
            THButtons.drawPencileditbuttonCanvas(theme: theme)

        let imageOfPencileditbuttonCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPencileditbuttonCanvas
    }

    @objc dynamic public class func imageOfSettingsCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 479, height: 479), false, 0)
            THButtons.drawSettingsCanvas(theme: theme)

        let imageOfSettingsCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSettingsCanvas
    }

    @objc dynamic public class func imageOfDropCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 255, height: 255), false, 0)
            THButtons.drawDropCanvas(theme: theme)

        let imageOfDropCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfDropCanvas
    }

    @objc dynamic public class func imageOfUpCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 255, height: 255), false, 0)
            THButtons.drawUpCanvas(theme: theme)

        let imageOfUpCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfUpCanvas
    }

    @objc dynamic public class func imageOfCheckedCanvas2(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 427, height: 427), false, 0)
            THButtons.drawCheckedCanvas2(theme: theme)

        let imageOfCheckedCanvas2 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCheckedCanvas2
    }

    @objc dynamic public class func imageOfCross(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 476, height: 476), false, 0)
            THButtons.drawCross(theme: theme)

        let imageOfCross = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCross
    }

    @objc dynamic public class func imageOfUserCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
            THButtons.drawUserCanvas(theme: theme)

        let imageOfUserCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfUserCanvas
    }

    @objc dynamic public class func imageOfEmailCanvase(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 484, height: 484), false, 0)
            THButtons.drawEmailCanvase(theme: theme)

        let imageOfEmailCanvase = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfEmailCanvase
    }

    @objc dynamic public class func imageOfPasswordCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 512, height: 512), false, 0)
            THButtons.drawPasswordCanvas(theme: theme)

        let imageOfPasswordCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPasswordCanvas
    }

    @objc dynamic public class func imageOfCameraCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            THButtons.drawCameraCanvas(theme: theme)

        let imageOfCameraCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCameraCanvas
    }

    @objc dynamic public class func imageOfPictureCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 52, height: 52), false, 0)
            THButtons.drawPictureCanvas(theme: theme)

        let imageOfPictureCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPictureCanvas
    }

    @objc dynamic public class func imageOfLocationCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 512, height: 512), false, 0)
            THButtons.drawLocationCanvas(theme: theme)

        let imageOfLocationCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfLocationCanvas
    }

    @objc dynamic public class func imageOfClockCanavas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            THButtons.drawClockCanavas(theme: theme)

        let imageOfClockCanavas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfClockCanavas
    }

    @objc dynamic public class func imageOfCalendarCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 512, height: 512), false, 0)
            THButtons.drawCalendarCanvas(theme: theme)

        let imageOfCalendarCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCalendarCanvas
    }

    @objc dynamic public class func imageOfLogoutCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 330, height: 330), false, 0)
            THButtons.drawLogoutCanvas(theme: theme)

        let imageOfLogoutCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfLogoutCanvas
    }

    @objc dynamic public class func imageOfMenuCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 124, height: 124), false, 0)
            THButtons.drawMenuCanvas(theme: theme)

        let imageOfMenuCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMenuCanvas
    }

    @objc dynamic public class func imageOfPlaybuttonCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            THButtons.drawPlaybuttonCanvas(theme: theme)

        let imageOfPlaybuttonCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPlaybuttonCanvas
    }

    @objc dynamic public class func imageOfRadioonbuttonCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 510, height: 510), false, 0)
            THButtons.drawRadioonbuttonCanvas(theme: theme)

        let imageOfRadioonbuttonCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfRadioonbuttonCanvas
    }

    @objc dynamic public class func imageOfRadiooffbuttonCanvas2(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 510, height: 510), false, 0)
            THButtons.drawRadiooffbuttonCanvas2(theme: theme)

        let imageOfRadiooffbuttonCanvas2 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfRadiooffbuttonCanvas2
    }

    @objc dynamic public class func imageOfPlusCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 52, height: 52), false, 0)
            THButtons.drawPlusCanvas(theme: theme)

        let imageOfPlusCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPlusCanvas
    }

    @objc dynamic public class func imageOfMinusCanvas(theme: UIColor = UIColor(red: 0.000, green: 0.079, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 52, height: 52), false, 0)
            THButtons.drawMinusCanvas(theme: theme)

        let imageOfMinusCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMinusCanvas
    }




    @objc(THButtonsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
