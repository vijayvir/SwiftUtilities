//
//  StyleKit.swift
//  ProjectName
//
//  Created by AuthorName on 26/03/19.
//  Copyright Â© 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfCanvasSetting: UIImage?
        static var canvasSettingTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawCanvasClould(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 512, height: 512), resizing: ResizingBehavior = .aspectFit, records: CGFloat = 99) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 512, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 512, y: resizedFrame.height / 512)


        //// Color Declarations
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let expression = "" + "\(Int(round(records)))"

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 256, y: 256)
        context.scaleBy(x: 0.98, y: 0.98)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -256, y: 48))
        bezierPath.addCurve(to: CGPoint(x: -207.97, y: -35.15), controlPoint1: CGPoint(x: -256, y: 12.53), controlPoint2: CGPoint(x: -236.68, y: -18.53))
        bezierPath.addCurve(to: CGPoint(x: -64, y: -176), controlPoint1: CGPoint(x: -206.29, y: -113.23), controlPoint2: CGPoint(x: -142.48, y: -176))
        bezierPath.addCurve(to: CGPoint(x: 58.49, y: -107.75), controlPoint1: CGPoint(x: -12.26, y: -176), controlPoint2: CGPoint(x: 33.1, y: -148.72))
        bezierPath.addCurve(to: CGPoint(x: 88, y: -112), controlPoint1: CGPoint(x: 67.84, y: -110.52), controlPoint2: CGPoint(x: 77.75, y: -112))
        bezierPath.addCurve(to: CGPoint(x: 185.37, y: -44.61), controlPoint1: CGPoint(x: 132.55, y: -112), controlPoint2: CGPoint(x: 170.56, y: -83.98))
        bezierPath.addCurve(to: CGPoint(x: 256, y: 48), controlPoint1: CGPoint(x: 226.08, y: -33.48), controlPoint2: CGPoint(x: 256, y: 3.77))
        bezierPath.addCurve(to: CGPoint(x: 160, y: 144), controlPoint1: CGPoint(x: 256, y: 100.91), controlPoint2: CGPoint(x: 213.02, y: 144))
        bezierPath.addLine(to: CGPoint(x: -160, y: 144))
        bezierPath.addCurve(to: CGPoint(x: -256, y: 48), controlPoint1: CGPoint(x: -213.01, y: 144), controlPoint2: CGPoint(x: -256, y: 101.02))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 159.56, y: -16))
        bezierPath.addCurve(to: CGPoint(x: 88, y: -80), controlPoint1: CGPoint(x: 155.58, y: -52), controlPoint2: CGPoint(x: 125.06, y: -80))
        bezierPath.addCurve(to: CGPoint(x: 43.24, y: -64.4), controlPoint1: CGPoint(x: 71.08, y: -80), controlPoint2: CGPoint(x: 55.53, y: -74.17))
        bezierPath.addCurve(to: CGPoint(x: -64, y: -144), controlPoint1: CGPoint(x: 29.35, y: -110.46), controlPoint2: CGPoint(x: -13.41, y: -144))
        bezierPath.addCurve(to: CGPoint(x: -176, y: -32), controlPoint1: CGPoint(x: -125.86, y: -144), controlPoint2: CGPoint(x: -176, y: -93.86))
        bezierPath.addCurve(to: CGPoint(x: -174.61, y: -14.33), controlPoint1: CGPoint(x: -176, y: -25.99), controlPoint2: CGPoint(x: -175.53, y: -20.09))
        bezierPath.addCurve(to: CGPoint(x: -224, y: 48), controlPoint1: CGPoint(x: -202.92, y: -7.72), controlPoint2: CGPoint(x: -224, y: 17.73))
        bezierPath.addCurve(to: CGPoint(x: -160.05, y: 112), controlPoint1: CGPoint(x: -224, y: 83.35), controlPoint2: CGPoint(x: -195.29, y: 112))
        bezierPath.addLine(to: CGPoint(x: 160.05, y: 112))
        bezierPath.addCurve(to: CGPoint(x: 224, y: 48), controlPoint1: CGPoint(x: 195.37, y: 112), controlPoint2: CGPoint(x: 224, y: 83.27))
        bezierPath.addCurve(to: CGPoint(x: 160.05, y: -16), controlPoint1: CGPoint(x: 224, y: 12.65), controlPoint2: CGPoint(x: 195.29, y: -16))
        bezierPath.addLine(to: CGPoint(x: 159.56, y: -16))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezierPath.fill()

        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 107, y: 177, width: 243, height: 158)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 159, weight: .bold),
            .foregroundColor: fillColor2,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = expression.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        expression.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCanvasSetting(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 512, height: 512), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 512, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 512, y: resizedFrame.height / 512)


        //// Color Declarations
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// setting
        context.saveGState()
        context.translateBy(x: 257, y: 250)
        context.scaleBy(x: 0.9, y: 0.9)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 201.1, y: -45.2))
        bezierPath.addLine(to: CGPoint(x: 177.18, y: -45.2))
        bezierPath.addLine(to: CGPoint(x: 177.62, y: -43.66))
        bezierPath.addCurve(to: CGPoint(x: 160.95, y: -84.14), controlPoint1: CGPoint(x: 173.61, y: -57.75), controlPoint2: CGPoint(x: 168.02, y: -71.33))
        bezierPath.addLine(to: CGPoint(x: 177.18, y: -102.54))
        bezierPath.addLine(to: CGPoint(x: 177.24, y: -102.61))
        bezierPath.addCurve(to: CGPoint(x: 177.24, y: -175.01), controlPoint1: CGPoint(x: 197.12, y: -122.6), controlPoint2: CGPoint(x: 197.12, y: -155.02))
        bezierPath.addLine(to: CGPoint(x: 176.88, y: -175.36))
        bezierPath.addCurve(to: CGPoint(x: 104.7, y: -174.73), controlPoint1: CGPoint(x: 156.48, y: -194.49), controlPoint2: CGPoint(x: 124.77, y: -194.21))
        bezierPath.addLine(to: CGPoint(x: 88.1, y: -158.01))
        bezierPath.addLine(to: CGPoint(x: 86.78, y: -158.76))
        bezierPath.addCurve(to: CGPoint(x: 46.53, y: -175.53), controlPoint1: CGPoint(x: 74.03, y: -165.86), controlPoint2: CGPoint(x: 60.53, y: -171.49))
        bezierPath.addLine(to: CGPoint(x: 48.06, y: -198.8))
        bezierPath.addLine(to: CGPoint(x: 48.06, y: -198.8))
        bezierPath.addCurve(to: CGPoint(x: -2.84, y: -250), controlPoint1: CGPoint(x: 48.06, y: -227.08), controlPoint2: CGPoint(x: 25.27, y: -250))
        bezierPath.addLine(to: CGPoint(x: -2.84, y: -250))
        bezierPath.addCurve(to: CGPoint(x: -53.74, y: -198.8), controlPoint1: CGPoint(x: -30.95, y: -250), controlPoint2: CGPoint(x: -53.74, y: -227.08))
        bezierPath.addLine(to: CGPoint(x: -53.74, y: -174.74))
        bezierPath.addLine(to: CGPoint(x: -52.21, y: -175.18))
        bezierPath.addCurve(to: CGPoint(x: -92.45, y: -158.42), controlPoint1: CGPoint(x: -66.21, y: -171.15), controlPoint2: CGPoint(x: -79.71, y: -165.52))
        bezierPath.addLine(to: CGPoint(x: -110.75, y: -174.74))
        bezierPath.addLine(to: CGPoint(x: -110.93, y: -174.91))
        bezierPath.addCurve(to: CGPoint(x: -183.34, y: -174.27), controlPoint1: CGPoint(x: -131.39, y: -194.1), controlPoint2: CGPoint(x: -163.21, y: -193.82))
        bezierPath.addLine(to: CGPoint(x: -182.92, y: -174.67))
        bezierPath.addCurve(to: CGPoint(x: -182.92, y: -102.27), controlPoint1: CGPoint(x: -202.8, y: -154.68), controlPoint2: CGPoint(x: -202.8, y: -122.26))
        bezierPath.addLine(to: CGPoint(x: -165.89, y: -85.14))
        bezierPath.addLine(to: CGPoint(x: -166.63, y: -83.8))
        bezierPath.addCurve(to: CGPoint(x: -183.3, y: -43.32), controlPoint1: CGPoint(x: -173.69, y: -70.99), controlPoint2: CGPoint(x: -179.29, y: -57.4))
        bezierPath.addLine(to: CGPoint(x: -206.1, y: -44.86))
        bezierPath.addLine(to: CGPoint(x: -206.1, y: -44.86))
        bezierPath.addCurve(to: CGPoint(x: -257, y: 6.34), controlPoint1: CGPoint(x: -234.21, y: -44.86), controlPoint2: CGPoint(x: -257, y: -21.94))
        bezierPath.addLine(to: CGPoint(x: -257, y: 6.34))
        bezierPath.addCurve(to: CGPoint(x: -206.1, y: 57.54), controlPoint1: CGPoint(x: -257, y: 34.62), controlPoint2: CGPoint(x: -234.21, y: 57.54))
        bezierPath.addLine(to: CGPoint(x: -182.18, y: 57.54))
        bezierPath.addLine(to: CGPoint(x: -182.62, y: 56))
        bezierPath.addCurve(to: CGPoint(x: -165.95, y: 96.48), controlPoint1: CGPoint(x: -178.61, y: 70.09), controlPoint2: CGPoint(x: -173.02, y: 83.67))
        bezierPath.addLine(to: CGPoint(x: -182.18, y: 114.89))
        bezierPath.addLine(to: CGPoint(x: -182.24, y: 114.95))
        bezierPath.addCurve(to: CGPoint(x: -182.24, y: 187.36), controlPoint1: CGPoint(x: -202.12, y: 134.94), controlPoint2: CGPoint(x: -202.12, y: 167.36))
        bezierPath.addLine(to: CGPoint(x: -181.88, y: 187.7))
        bezierPath.addCurve(to: CGPoint(x: -109.7, y: 187.07), controlPoint1: CGPoint(x: -161.48, y: 206.83), controlPoint2: CGPoint(x: -129.77, y: 206.55))
        bezierPath.addLine(to: CGPoint(x: -93.1, y: 170.35))
        bezierPath.addLine(to: CGPoint(x: -91.78, y: 171.1))
        bezierPath.addCurve(to: CGPoint(x: -51.53, y: 187.87), controlPoint1: CGPoint(x: -79.03, y: 178.2), controlPoint2: CGPoint(x: -65.53, y: 183.83))
        bezierPath.addLine(to: CGPoint(x: -53.06, y: 210.8))
        bezierPath.addLine(to: CGPoint(x: -53.06, y: 210.8))
        bezierPath.addCurve(to: CGPoint(x: -2.16, y: 262), controlPoint1: CGPoint(x: -53.06, y: 239.08), controlPoint2: CGPoint(x: -30.27, y: 262))
        bezierPath.addCurve(to: CGPoint(x: 48.74, y: 210.8), controlPoint1: CGPoint(x: 25.95, y: 262), controlPoint2: CGPoint(x: 48.74, y: 239.08))
        bezierPath.addLine(to: CGPoint(x: 48.74, y: 186.74))
        bezierPath.addLine(to: CGPoint(x: 47.21, y: 187.18))
        bezierPath.addCurve(to: CGPoint(x: 87.45, y: 170.42), controlPoint1: CGPoint(x: 61.21, y: 183.15), controlPoint2: CGPoint(x: 74.71, y: 177.52))
        bezierPath.addLine(to: CGPoint(x: 105.75, y: 186.74))
        bezierPath.addLine(to: CGPoint(x: 106.05, y: 187.02))
        bezierPath.addCurve(to: CGPoint(x: 178.22, y: 186.39), controlPoint1: CGPoint(x: 126.44, y: 206.15), controlPoint2: CGPoint(x: 158.16, y: 205.87))
        bezierPath.addLine(to: CGPoint(x: 177.92, y: 186.67))
        bezierPath.addCurve(to: CGPoint(x: 177.92, y: 114.27), controlPoint1: CGPoint(x: 197.8, y: 166.68), controlPoint2: CGPoint(x: 197.8, y: 134.26))
        bezierPath.addLine(to: CGPoint(x: 160.89, y: 97.14))
        bezierPath.addLine(to: CGPoint(x: 161.63, y: 95.8))
        bezierPath.addCurve(to: CGPoint(x: 178.3, y: 55.32), controlPoint1: CGPoint(x: 168.69, y: 82.99), controlPoint2: CGPoint(x: 174.29, y: 69.4))
        bezierPath.addLine(to: CGPoint(x: 201.1, y: 56.86))
        bezierPath.addLine(to: CGPoint(x: 201.1, y: 56.86))
        bezierPath.addCurve(to: CGPoint(x: 252, y: 5.66), controlPoint1: CGPoint(x: 229.21, y: 56.86), controlPoint2: CGPoint(x: 252, y: 33.94))
        bezierPath.addCurve(to: CGPoint(x: 201.1, y: -45.54), controlPoint1: CGPoint(x: 252, y: -22.62), controlPoint2: CGPoint(x: 229.21, y: -45.54))
        bezierPath.addLine(to: CGPoint(x: 201.1, y: -45.2))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 71.14, y: 25.8))
        bezierPath.addLine(to: CGPoint(x: 71.24, y: 25.39))
        bezierPath.addCurve(to: CGPoint(x: 63.61, y: 44.38), controlPoint1: CGPoint(x: 69.59, y: 32.05), controlPoint2: CGPoint(x: 67.02, y: 38.44))
        bezierPath.addLine(to: CGPoint(x: 63.69, y: 44.24))
        bezierPath.addCurve(to: CGPoint(x: 35.75, y: 72.35), controlPoint1: CGPoint(x: 56.99, y: 55.91), controlPoint2: CGPoint(x: 47.35, y: 65.61))
        bezierPath.addLine(to: CGPoint(x: 35.96, y: 72.22))
        bezierPath.addCurve(to: CGPoint(x: 17.01, y: 80.11), controlPoint1: CGPoint(x: 30.07, y: 75.78), controlPoint2: CGPoint(x: 23.68, y: 78.44))
        bezierPath.addLine(to: CGPoint(x: 17.52, y: 79.97))
        bezierPath.addCurve(to: CGPoint(x: -21.29, y: 80.31), controlPoint1: CGPoint(x: 4.85, y: 83.63), controlPoint2: CGPoint(x: -8.57, y: 83.74))
        bezierPath.addLine(to: CGPoint(x: -21.78, y: 80.17))
        bezierPath.addCurve(to: CGPoint(x: -40.65, y: 72.5), controlPoint1: CGPoint(x: -28.4, y: 78.51), controlPoint2: CGPoint(x: -34.75, y: 75.93))
        bezierPath.addLine(to: CGPoint(x: -40.51, y: 72.58))
        bezierPath.addCurve(to: CGPoint(x: -68.46, y: 44.47), controlPoint1: CGPoint(x: -52.12, y: 65.84), controlPoint2: CGPoint(x: -61.76, y: 56.15))
        bezierPath.addLine(to: CGPoint(x: -68.33, y: 44.69))
        bezierPath.addCurve(to: CGPoint(x: -76.18, y: 25.63), controlPoint1: CGPoint(x: -71.87, y: 38.76), controlPoint2: CGPoint(x: -74.51, y: 32.34))
        bezierPath.addLine(to: CGPoint(x: -76.03, y: 26.18))
        bezierPath.addCurve(to: CGPoint(x: -76.37, y: -12.95), controlPoint1: CGPoint(x: -79.67, y: 13.41), controlPoint2: CGPoint(x: -79.78, y: -0.12))
        bezierPath.addLine(to: CGPoint(x: -76.27, y: -13.25))
        bezierPath.addCurve(to: CGPoint(x: -68.54, y: -32.5), controlPoint1: CGPoint(x: -74.6, y: -20), controlPoint2: CGPoint(x: -72, y: -26.48))
        bezierPath.addLine(to: CGPoint(x: -68.69, y: -32.24))
        bezierPath.addCurve(to: CGPoint(x: -40.75, y: -60.35), controlPoint1: CGPoint(x: -61.99, y: -43.91), controlPoint2: CGPoint(x: -52.35, y: -53.61))
        bezierPath.addLine(to: CGPoint(x: -40.96, y: -60.22))
        bezierPath.addCurve(to: CGPoint(x: -22.01, y: -68.11), controlPoint1: CGPoint(x: -35.07, y: -63.78), controlPoint2: CGPoint(x: -28.68, y: -66.44))
        bezierPath.addLine(to: CGPoint(x: -21.6, y: -68.23))
        bezierPath.addCurve(to: CGPoint(x: 17.84, y: -67.88), controlPoint1: CGPoint(x: -8.67, y: -71.71), controlPoint2: CGPoint(x: 4.97, y: -71.59))
        bezierPath.addLine(to: CGPoint(x: 16.78, y: -68.17))
        bezierPath.addCurve(to: CGPoint(x: 35.65, y: -60.5), controlPoint1: CGPoint(x: 23.4, y: -66.51), controlPoint2: CGPoint(x: 29.75, y: -63.93))
        bezierPath.addLine(to: CGPoint(x: 35.51, y: -60.58))
        bezierPath.addCurve(to: CGPoint(x: 63.46, y: -32.47), controlPoint1: CGPoint(x: 47.12, y: -53.84), controlPoint2: CGPoint(x: 56.76, y: -44.15))
        bezierPath.addLine(to: CGPoint(x: 63.33, y: -32.69))
        bezierPath.addCurve(to: CGPoint(x: 71.18, y: -13.63), controlPoint1: CGPoint(x: 66.87, y: -26.76), controlPoint2: CGPoint(x: 69.51, y: -20.34))
        bezierPath.addLine(to: CGPoint(x: 71.04, y: -14.13))
        bezierPath.addCurve(to: CGPoint(x: 71.38, y: 24.91), controlPoint1: CGPoint(x: 74.67, y: -1.39), controlPoint2: CGPoint(x: 74.79, y: 12.1))
        bezierPath.addLine(to: CGPoint(x: 71.14, y: 25.8))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfCanvasClould(records: CGFloat = 99) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 512, height: 512), false, 0)
            StyleKit.drawCanvasClould(records: records)

        let imageOfCanvasClould = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCanvasClould
    }

    @objc dynamic public class var imageOfCanvasSetting: UIImage {
        if Cache.imageOfCanvasSetting != nil {
            return Cache.imageOfCanvasSetting!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 512, height: 512), false, 0)
            StyleKit.drawCanvasSetting()

        Cache.imageOfCanvasSetting = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvasSetting!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var canvasSettingTargets: [AnyObject]! {
        get { return Cache.canvasSettingTargets }
        set {
            Cache.canvasSettingTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfCanvasSetting)
            }
        }
    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
